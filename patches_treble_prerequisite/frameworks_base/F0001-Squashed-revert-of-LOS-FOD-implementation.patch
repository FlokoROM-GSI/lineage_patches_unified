From 00a280cca8bd07fca0b0c08378ecbea2f08b2dfd Mon Sep 17 00:00:00 2001
From: AndroPlus <hosigumayuugi@gmail.com>
Date: Sun, 25 Jul 2021 15:21:04 +0900
Subject: [PATCH 1/1] Squashed revert of LOS FOD implementation

---
 .../internal/statusbar/IStatusBar.aidl        |   6 -
 .../internal/statusbar/IStatusBarService.aidl |   6 -
 data/etc/com.android.systemui.xml             |   1 -
 .../car/statusbar/UnusedStatusBar.java        |   7 +-
 .../car/statusbar/UnusedStatusBarModule.java  |   7 +-
 packages/SystemUI/Android.bp                  |   2 -
 packages/SystemUI/AndroidManifest.xml         |   1 -
 .../res-keyguard/values/lineage_dimens.xml    |  20 -
 .../res/drawable/fod_icon_default.xml         |  26 -
 packages/SystemUI/res/values/config.xml       |   1 -
 .../SystemUI/res/values/lineage_config.xml    |   3 -
 .../keyguard/KeyguardSecurityContainer.java   |  15 +-
 .../keyguard/KeyguardUpdateMonitor.java       |   9 +-
 .../AuthBiometricFingerprintView.java         |  13 -
 .../biometrics/AuthBiometricView.java         |  27 +-
 .../systemui/biometrics/FODCircleView.java    | 742 ------------------
 .../biometrics/FODCircleViewImpl.java         | 174 ----
 .../biometrics/FODCircleViewImplCallback.java |  25 -
 .../systemui/dagger/SystemUIBinder.java       |   7 -
 .../keyguard/KeyguardViewMediator.java        |  14 +-
 .../systemui/statusbar/CommandQueue.java      |  28 -
 .../KeyguardIndicationController.java         |  52 --
 .../notification/ActivityLaunchAnimator.java  |  21 +-
 .../systemui/statusbar/phone/StatusBar.java   |  74 +-
 .../phone/StatusBarKeyguardViewManager.java   |  11 +-
 .../phone/dagger/StatusBarPhoneModule.java    |   7 +-
 .../ActivityLaunchAnimatorTest.java           |   6 +-
 .../statusbar/phone/StatusBarTest.java        |   5 +-
 services/core/Android.bp                      |   1 -
 .../biometrics/BiometricServiceBase.java      |   2 +-
 .../fingerprint/FingerprintService.java       | 116 ---
 .../statusbar/StatusBarManagerService.java    |  22 -
 32 files changed, 20 insertions(+), 1431 deletions(-)
 delete mode 100644 packages/SystemUI/res-keyguard/values/lineage_dimens.xml
 delete mode 100644 packages/SystemUI/res/drawable/fod_icon_default.xml
 delete mode 100644 packages/SystemUI/src/com/android/systemui/biometrics/FODCircleView.java
 delete mode 100644 packages/SystemUI/src/com/android/systemui/biometrics/FODCircleViewImpl.java
 delete mode 100644 packages/SystemUI/src/com/android/systemui/biometrics/FODCircleViewImplCallback.java

diff --git a/core/java/com/android/internal/statusbar/IStatusBar.aidl b/core/java/com/android/internal/statusbar/IStatusBar.aidl
index 5f7cdcda696..2bdaac4fa1b 100644
--- a/core/java/com/android/internal/statusbar/IStatusBar.aidl
+++ b/core/java/com/android/internal/statusbar/IStatusBar.aidl
@@ -228,12 +228,6 @@ oneway interface IStatusBar
      */
     void suppressAmbientDisplay(boolean suppress);
 
-    /**
-     *  Used to show or hide in display fingerprint view.
-     */
-    void showInDisplayFingerprintView();
-    void hideInDisplayFingerprintView();
-
     /**
      * Used to block or unblock usage of gestural navigation
      */
diff --git a/core/java/com/android/internal/statusbar/IStatusBarService.aidl b/core/java/com/android/internal/statusbar/IStatusBarService.aidl
index 8f95b474cbf..f3ca1d7f652 100644
--- a/core/java/com/android/internal/statusbar/IStatusBarService.aidl
+++ b/core/java/com/android/internal/statusbar/IStatusBarService.aidl
@@ -148,12 +148,6 @@ interface IStatusBarService
      */
     void suppressAmbientDisplay(boolean suppress);
 
-    /**
-     * Used to show or hide in display fingerprint view.
-     */
-    void showInDisplayFingerprintView();
-    void hideInDisplayFingerprintView();
-
     /**
      * Starts the default assistant app.
      */
diff --git a/data/etc/com.android.systemui.xml b/data/etc/com.android.systemui.xml
index 8fc8b4b13c0..e5ab2bbb7ac 100644
--- a/data/etc/com.android.systemui.xml
+++ b/data/etc/com.android.systemui.xml
@@ -32,7 +32,6 @@
         <permission name="android.permission.GET_APP_OPS_STATS"/>
         <permission name="android.permission.INTERACT_ACROSS_USERS"/>
         <permission name="android.permission.MANAGE_DEBUGGING"/>
-        <permission name="android.permission.MANAGE_FINGERPRINT" />
         <permission name="android.permission.MANAGE_SENSOR_PRIVACY"/>
         <permission name="android.permission.MANAGE_USB"/>
         <permission name="android.permission.MANAGE_USERS"/>
diff --git a/packages/CarSystemUI/src/com/android/systemui/car/statusbar/UnusedStatusBar.java b/packages/CarSystemUI/src/com/android/systemui/car/statusbar/UnusedStatusBar.java
index 6095928c4cf..b7b9431d69d 100644
--- a/packages/CarSystemUI/src/com/android/systemui/car/statusbar/UnusedStatusBar.java
+++ b/packages/CarSystemUI/src/com/android/systemui/car/statusbar/UnusedStatusBar.java
@@ -26,7 +26,6 @@ import com.android.keyguard.KeyguardUpdateMonitor;
 import com.android.keyguard.ViewMediatorCallback;
 import com.android.systemui.InitController;
 import com.android.systemui.assist.AssistManager;
-import com.android.systemui.biometrics.FODCircleViewImpl;
 import com.android.systemui.broadcast.BroadcastDispatcher;
 import com.android.systemui.bubbles.BubbleController;
 import com.android.systemui.colorextraction.SysuiColorExtractor;
@@ -185,8 +184,7 @@ public class UnusedStatusBar extends StatusBar {
             DismissCallbackRegistry dismissCallbackRegistry,
             Lazy<NotificationShadeDepthController> notificationShadeDepthControllerLazy,
             StatusBarTouchableRegionManager statusBarTouchableRegionManager,
-            TunerService tunerService,
-            FODCircleViewImpl fodCircleViewImpl) {
+            TunerService tunerService) {
         super(context, notificationsController, lightBarController, autoHideController,
                 keyguardUpdateMonitor, statusBarIconController, pulseExpansionHandler,
                 notificationWakeUpCoordinator, keyguardBypassController, keyguardStateController,
@@ -213,8 +211,7 @@ public class UnusedStatusBar extends StatusBar {
                 userInfoControllerImpl, phoneStatusBarPolicy, keyguardIndicationController,
                 dismissCallbackRegistry, notificationShadeDepthControllerLazy,
                 statusBarTouchableRegionManager,
-                tunerService,
-                fodCircleViewImpl);
+                tunerService);
     }
 
     @Override
diff --git a/packages/CarSystemUI/src/com/android/systemui/car/statusbar/UnusedStatusBarModule.java b/packages/CarSystemUI/src/com/android/systemui/car/statusbar/UnusedStatusBarModule.java
index 28bcaf6c144..f2cef14b558 100644
--- a/packages/CarSystemUI/src/com/android/systemui/car/statusbar/UnusedStatusBarModule.java
+++ b/packages/CarSystemUI/src/com/android/systemui/car/statusbar/UnusedStatusBarModule.java
@@ -30,7 +30,6 @@ import com.android.keyguard.KeyguardUpdateMonitor;
 import com.android.keyguard.ViewMediatorCallback;
 import com.android.systemui.InitController;
 import com.android.systemui.assist.AssistManager;
-import com.android.systemui.biometrics.FODCircleViewImpl;
 import com.android.systemui.broadcast.BroadcastDispatcher;
 import com.android.systemui.bubbles.BubbleController;
 import com.android.systemui.colorextraction.SysuiColorExtractor;
@@ -205,8 +204,7 @@ public interface UnusedStatusBarModule {
             Lazy<NotificationShadeDepthController> notificationShadeDepthController,
             DismissCallbackRegistry dismissCallbackRegistry,
             StatusBarTouchableRegionManager statusBarTouchableRegionManager,
-            TunerService tunerService,
-            FODCircleViewImpl fodCircleViewImpl) {
+            TunerService tunerService) {
         return new UnusedStatusBar(
                 context,
                 notificationsController,
@@ -285,7 +283,6 @@ public interface UnusedStatusBarModule {
                 dismissCallbackRegistry,
                 notificationShadeDepthController,
                 statusBarTouchableRegionManager,
-                tunerService,
-                fodCircleViewImpl);
+                tunerService);
     }
 }
diff --git a/packages/SystemUI/Android.bp b/packages/SystemUI/Android.bp
index b5a6d44f8f6..ccc641d59aa 100644
--- a/packages/SystemUI/Android.bp
+++ b/packages/SystemUI/Android.bp
@@ -71,7 +71,6 @@ android_library {
         "dagger2-2.19",
         "jsr330",
         "org.lineageos.platform.internal",
-        "vendor.lineage.biometrics.fingerprint.inscreen-V1.0-java",
         "vendor.lineage.powershare-V1.0-java",
         "airbnb-lottie",
         "tensorflowlite_java",
@@ -152,7 +151,6 @@ android_library {
         "dagger2-2.19",
         "jsr330",
         "org.lineageos.platform.internal",
-        "vendor.lineage.biometrics.fingerprint.inscreen-V1.0-java",
         "vendor.lineage.powershare-V1.0-java",
         "airbnb-lottie",
     ],
diff --git a/packages/SystemUI/AndroidManifest.xml b/packages/SystemUI/AndroidManifest.xml
index a286e22f302..c7d91e5cd01 100644
--- a/packages/SystemUI/AndroidManifest.xml
+++ b/packages/SystemUI/AndroidManifest.xml
@@ -138,7 +138,6 @@
     <uses-permission android:name="android.permission.USE_FINGERPRINT" />
     <uses-permission android:name="android.permission.RESET_FINGERPRINT_LOCKOUT" />
     <uses-permission android:name="android.permission.MANAGE_BIOMETRIC" />
-    <uses-permission android:name="android.permission.MANAGE_FINGERPRINT" />
     <uses-permission android:name="android.permission.MANAGE_SLICE_PERMISSIONS" />
     <uses-permission android:name="android.permission.CONTROL_KEYGUARD_SECURE_NOTIFICATIONS" />
     <uses-permission android:name="android.permission.GET_RUNTIME_PERMISSIONS" />
diff --git a/packages/SystemUI/res-keyguard/values/lineage_dimens.xml b/packages/SystemUI/res-keyguard/values/lineage_dimens.xml
deleted file mode 100644
index bb6070c7199..00000000000
--- a/packages/SystemUI/res-keyguard/values/lineage_dimens.xml
+++ /dev/null
@@ -1,20 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-     Copyright (C) 2020 The LineageOS Project
-
-     Licensed under the Apache License, Version 2.0 (the "License");
-     you may not use this file except in compliance with the License.
-     You may obtain a copy of the License at
-
-          http://www.apache.org/licenses/LICENSE-2.0
-
-     Unless required by applicable law or agreed to in writing, software
-     distributed under the License is distributed on an "AS IS" BASIS,
-     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-     See the License for the specific language governing permissions and
-     limitations under the License.
--->
-<resources>
-    <!-- The minimum bottom margin of the keyguard security container -->
-    <dimen name="kg_security_container_min_bottom_margin">0dp</dimen>
-</resources>
diff --git a/packages/SystemUI/res/drawable/fod_icon_default.xml b/packages/SystemUI/res/drawable/fod_icon_default.xml
deleted file mode 100644
index 693917bb79f..00000000000
--- a/packages/SystemUI/res/drawable/fod_icon_default.xml
+++ /dev/null
@@ -1,26 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-     Copyright (C) 2019 The LineageOS Project
-
-     Licensed under the Apache License, Version 2.0 (the "License");
-     you may not use this file except in compliance with the License.
-     You may obtain a copy of the License at
-
-          http://www.apache.org/licenses/LICENSE-2.0
-
-     Unless required by applicable law or agreed to in writing, software
-     distributed under the License is distributed on an "AS IS" BASIS,
-     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-     See the License for the specific language governing permissions and
-     limitations under the License.
--->
-<vector xmlns:android="http://schemas.android.com/apk/res/android"
-    android:width="120dp"
-    android:height="120dp"
-    android:viewportWidth="100"
-    android:viewportHeight="100">
-    <path
-        android:fillColor="#bfd9d9d9"
-        android:fillType="evenOdd"
-        android:pathData="M50,100C77.614,100 100,77.614 100,50C100,22.386 77.614,0 50,0C22.386,0 0,22.386 0,50C0,77.614 22.386,100 50,100ZM70.499,22.676C70.751,22.82 71.039,22.892 71.327,22.892C71.975,22.892 72.587,22.532 72.911,21.884C73.379,21.02 73.055,19.94 72.155,19.472C64.811,15.692 58.115,14 50.447,14C42.707,14 35.363,15.872 28.667,19.508C27.803,19.976 27.479,21.092 27.947,21.956C28.451,22.82 29.531,23.144 30.395,22.676C36.551,19.292 43.319,17.6 50.447,17.6C57.611,17.6 63.587,19.112 70.499,22.676ZM18.767,41.468C19.091,41.684 19.451,41.792 19.811,41.792C20.387,41.792 20.927,41.54 21.215,41.036C24.455,36.5 28.559,32.9 33.455,30.38C43.751,25.052 56.963,25.052 67.295,30.344C72.155,32.828 76.259,36.392 79.499,40.928C80.075,41.756 81.191,41.936 82.019,41.36C82.847,40.784 83.027,39.632 82.451,38.84C78.887,33.836 74.351,29.912 68.951,27.14C57.611,21.308 43.139,21.344 31.835,27.176C26.435,29.948 21.899,33.908 18.335,38.948C17.759,39.776 17.939,40.892 18.767,41.468ZM41.051,84.704C41.375,85.064 41.843,85.244 42.311,85.244C42.779,85.244 43.247,85.064 43.643,84.704C44.327,83.984 44.327,82.868 43.643,82.148C40.871,79.34 39.287,77.576 36.983,73.436C34.787,69.548 33.635,64.76 33.635,59.576C33.635,50.864 41.159,43.772 50.411,43.772C59.663,43.772 67.187,50.864 67.187,59.576C67.187,60.584 67.979,61.376 68.987,61.376C69.995,61.376 70.787,60.584 70.787,59.576C70.787,48.884 61.643,40.172 50.411,40.172C39.179,40.172 30.035,48.884 30.035,59.576C30.035,65.372 31.331,70.772 33.815,75.2C36.227,79.556 37.919,81.572 41.051,84.704ZM56.963,75.38C60.059,77.504 63.839,78.584 68.123,78.584C68.627,78.584 70.427,78.548 72.479,78.152C73.487,77.972 74.135,77.036 73.955,76.064C73.775,75.056 72.839,74.408 71.867,74.588C70.427,74.84 68.987,74.948 68.123,74.948C64.523,74.948 61.535,74.12 58.979,72.392C54.587,69.44 51.995,64.652 51.995,59.576C51.995,58.568 51.203,57.776 50.195,57.776C49.187,57.776 48.395,58.568 48.395,59.576C48.395,65.84 51.599,71.744 56.963,75.38ZM60.419,85.928C60.563,85.964 60.743,86 60.887,86C61.643,86 62.399,85.46 62.579,84.632C62.831,83.696 62.291,82.688 61.319,82.436C56.243,81.032 52.967,79.16 49.547,75.776C45.191,71.456 42.815,65.696 42.815,59.54C42.815,55.688 46.163,52.556 50.303,52.556C54.443,52.556 57.791,55.688 57.791,59.54C57.791,65.372 62.759,70.124 68.879,70.124C74.999,70.124 79.967,65.372 79.967,59.54C79.967,43.988 66.647,31.352 50.267,31.352C38.639,31.352 28.019,37.868 23.231,47.912C21.611,51.332 20.783,55.256 20.783,59.576C20.783,64.436 21.647,69.116 23.411,73.832C23.735,74.732 24.779,75.236 25.715,74.876C26.651,74.552 27.119,73.508 26.759,72.572C24.599,66.812 24.347,62.384 24.347,59.576C24.347,55.832 25.067,52.412 26.471,49.496C30.683,40.676 40.043,34.988 50.267,34.988C64.667,34.988 76.367,46.004 76.367,59.576C76.367,63.428 73.019,66.56 68.879,66.56C64.739,66.56 61.391,63.428 61.391,59.576C61.391,53.744 56.423,48.992 50.303,48.992C44.183,48.992 39.215,53.744 39.215,59.576C39.215,66.704 41.987,73.364 47.027,78.368C50.951,82.22 54.695,84.344 60.419,85.928Z" />
-</vector>
diff --git a/packages/SystemUI/res/values/config.xml b/packages/SystemUI/res/values/config.xml
index 2dea33cfe5c..ede929c2b64 100644
--- a/packages/SystemUI/res/values/config.xml
+++ b/packages/SystemUI/res/values/config.xml
@@ -319,7 +319,6 @@
         <item>com.android.systemui.globalactions.GlobalActionsComponent</item>
         <item>com.android.systemui.ScreenDecorations</item>
         <item>com.android.systemui.biometrics.AuthController</item>
-        <item>com.android.systemui.biometrics.FODCircleViewImpl</item>
         <item>com.android.systemui.SliceBroadcastRelayHandler</item>
         <item>com.android.systemui.SizeCompatModeActivityController</item>
         <item>com.android.systemui.statusbar.notification.InstantAppNotifier</item>
diff --git a/packages/SystemUI/res/values/lineage_config.xml b/packages/SystemUI/res/values/lineage_config.xml
index 68545928294..6554fd54f11 100644
--- a/packages/SystemUI/res/values/lineage_config.xml
+++ b/packages/SystemUI/res/values/lineage_config.xml
@@ -15,9 +15,6 @@
      limitations under the License.
 -->
 <resources>
-    <!-- Color of the FOD view -->
-    <color name="config_fodColorBackground">#20000000</color>
-
     <!-- Max visible notification icons -->
     <integer name="config_maxVisibleNotificationIcons">4</integer>
     <integer name="config_maxVisibleNotificationIconsOnLock">5</integer>
diff --git a/packages/SystemUI/src/com/android/keyguard/KeyguardSecurityContainer.java b/packages/SystemUI/src/com/android/keyguard/KeyguardSecurityContainer.java
index bace9324ac9..1db2e32b8cd 100644
--- a/packages/SystemUI/src/com/android/keyguard/KeyguardSecurityContainer.java
+++ b/packages/SystemUI/src/com/android/keyguard/KeyguardSecurityContainer.java
@@ -33,7 +33,6 @@ import android.app.AlertDialog;
 import android.app.admin.DevicePolicyManager;
 import android.content.Context;
 import android.content.Intent;
-import android.content.pm.PackageManager;
 import android.content.res.ColorStateList;
 import android.graphics.Insets;
 import android.graphics.Rect;
@@ -80,8 +79,6 @@ import com.android.systemui.shared.system.SysUiStatsLog;
 import com.android.systemui.statusbar.policy.KeyguardStateController;
 import com.android.systemui.util.InjectionInflationController;
 
-import lineageos.app.LineageContextConstants;
-
 import java.util.List;
 
 public class KeyguardSecurityContainer extends FrameLayout implements KeyguardSecurityView {
@@ -127,7 +124,6 @@ public class KeyguardSecurityContainer extends FrameLayout implements KeyguardSe
     private InjectionInflationController mInjectionInflationController;
     private boolean mSwipeUpToRetry;
     private AdminSecondaryLockScreenController mSecondaryLockScreenController;
-    private boolean mHasFod;
 
     private final ViewConfiguration mViewConfiguration;
     private final SpringAnimation mSpringAnimation;
@@ -265,10 +261,6 @@ public class KeyguardSecurityContainer extends FrameLayout implements KeyguardSe
         mKeyguardStateController = Dependency.get(KeyguardStateController.class);
         mSecondaryLockScreenController = new AdminSecondaryLockScreenController(context, this,
                 mUpdateMonitor, mCallback, new Handler(Looper.myLooper()));
-
-        PackageManager packageManager = mContext.getPackageManager();
-        mHasFod = packageManager.hasSystemFeature(PackageManager.FEATURE_FINGERPRINT) &&
-                packageManager.hasSystemFeature(LineageContextConstants.Features.FOD);
     }
 
     public void setSecurityCallback(SecurityCallback callback) {
@@ -525,10 +517,6 @@ public class KeyguardSecurityContainer extends FrameLayout implements KeyguardSe
 
         // Consume bottom insets because we're setting the padding locally (for IME and navbar.)
         int inset;
-        int minBottomMargin = mHasFod && mUpdateMonitor.isFingerprintDetectionRunning() ?
-                getResources().getDimensionPixelSize(
-                        R.dimen.kg_security_container_min_bottom_margin) : 0;
-
         if (sNewInsetsMode == NEW_INSETS_MODE_FULL) {
             int bottomInset = insets.getInsetsIgnoringVisibility(systemBars()).bottom;
             int imeInset = insets.getInsets(ime()).bottom;
@@ -536,8 +524,7 @@ public class KeyguardSecurityContainer extends FrameLayout implements KeyguardSe
         } else {
             inset = insets.getSystemWindowInsetBottom();
         }
-        setPadding(getPaddingLeft(), getPaddingTop(), getPaddingRight(),
-               minBottomMargin > inset ? minBottomMargin : inset);
+        setPadding(getPaddingLeft(), getPaddingTop(), getPaddingRight(), inset);
         return insets.inset(0, 0, 0, inset);
     }
 
diff --git a/packages/SystemUI/src/com/android/keyguard/KeyguardUpdateMonitor.java b/packages/SystemUI/src/com/android/keyguard/KeyguardUpdateMonitor.java
index ae24461b416..df0c313a099 100644
--- a/packages/SystemUI/src/com/android/keyguard/KeyguardUpdateMonitor.java
+++ b/packages/SystemUI/src/com/android/keyguard/KeyguardUpdateMonitor.java
@@ -108,8 +108,6 @@ import com.android.systemui.util.RingerModeTracker;
 
 import com.google.android.collect.Lists;
 
-import lineageos.app.LineageContextConstants;
-
 import java.io.FileDescriptor;
 import java.io.PrintWriter;
 import java.lang.ref.WeakReference;
@@ -317,7 +315,6 @@ public class KeyguardUpdateMonitor implements TrustManager.TrustListener, Dumpab
     };
 
     private final Handler mHandler;
-    private final boolean mHasFod;
 
     private final Observer<Integer> mRingerModeObserver = new Observer<Integer>() {
         @Override
@@ -1729,9 +1726,6 @@ public class KeyguardUpdateMonitor implements TrustManager.TrustListener, Dumpab
             }
         };
 
-        mHasFod = mContext.getPackageManager().hasSystemFeature(
-                LineageContextConstants.Features.FOD);
-
         // Since device can't be un-provisioned, we only need to register a content observer
         // to update mDeviceProvisioned when we are...
         if (!mDeviceProvisioned) {
@@ -1900,8 +1894,7 @@ public class KeyguardUpdateMonitor implements TrustManager.TrustListener, Dumpab
             return;
         }
         mHandler.removeCallbacks(mRetryFingerprintAuthentication);
-        boolean hideFodForStrongAuth = mHasFod && userNeedsStrongAuth();
-        boolean shouldListenForFingerprint = !hideFodForStrongAuth && shouldListenForFingerprint();
+        boolean shouldListenForFingerprint = shouldListenForFingerprint();
         boolean runningOrRestarting = mFingerprintRunningState == BIOMETRIC_STATE_RUNNING
                 || mFingerprintRunningState == BIOMETRIC_STATE_CANCELLING_RESTARTING;
         if (runningOrRestarting && !shouldListenForFingerprint) {
diff --git a/packages/SystemUI/src/com/android/systemui/biometrics/AuthBiometricFingerprintView.java b/packages/SystemUI/src/com/android/systemui/biometrics/AuthBiometricFingerprintView.java
index 1a86a999135..9e070045033 100644
--- a/packages/SystemUI/src/com/android/systemui/biometrics/AuthBiometricFingerprintView.java
+++ b/packages/SystemUI/src/com/android/systemui/biometrics/AuthBiometricFingerprintView.java
@@ -22,7 +22,6 @@ import android.graphics.drawable.AnimatedVectorDrawable;
 import android.graphics.drawable.Drawable;
 import android.util.AttributeSet;
 import android.util.Log;
-import android.view.View;
 
 import com.android.systemui.R;
 
@@ -82,18 +81,6 @@ public class AuthBiometricFingerprintView extends AuthBiometricView {
         showTouchSensorString();
     }
 
-    @Override
-    void onFinishInflateInternal() {
-        super.onFinishInflateInternal();
-        if (mHasFod) {
-            mIconView.setVisibility(View.INVISIBLE);
-            mIconView.setPadding(0, 0, 0, 0);
-            // Add IndicatorView above the biometric icon
-            removeView(mIndicatorView);
-            addView(mIndicatorView, indexOfChild(mIconView));
-        }
-    }
-
     private void showTouchSensorString() {
         mIndicatorView.setText(R.string.fingerprint_dialog_touch_sensor);
         mIndicatorView.setTextColor(mTextColorHint);
diff --git a/packages/SystemUI/src/com/android/systemui/biometrics/AuthBiometricView.java b/packages/SystemUI/src/com/android/systemui/biometrics/AuthBiometricView.java
index f16533ec440..a4fb63466d1 100644
--- a/packages/SystemUI/src/com/android/systemui/biometrics/AuthBiometricView.java
+++ b/packages/SystemUI/src/com/android/systemui/biometrics/AuthBiometricView.java
@@ -46,12 +46,8 @@ import android.widget.LinearLayout;
 import android.widget.TextView;
 
 import com.android.internal.annotations.VisibleForTesting;
-import com.android.systemui.statusbar.phone.StatusBar;
-import com.android.systemui.Dependency;
 import com.android.systemui.R;
 
-import lineageos.app.LineageContextConstants;
-
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.util.ArrayList;
@@ -197,8 +193,6 @@ public abstract class AuthBiometricView extends LinearLayout {
     protected boolean mDialogSizeAnimating;
     protected Bundle mSavedState;
 
-    protected boolean mHasFod;
-
     protected final PackageManager mPackageManager;
 
     /**
@@ -270,8 +264,6 @@ public abstract class AuthBiometricView extends LinearLayout {
         mAccessibilityManager = context.getSystemService(AccessibilityManager.class);
 
         mPackageManager = context.getPackageManager();
-        mHasFod = mPackageManager.hasSystemFeature(PackageManager.FEATURE_FINGERPRINT) &&
-                mPackageManager.hasSystemFeature(LineageContextConstants.Features.FOD);
 
         mResetErrorRunnable = () -> {
             updateState(getStateForAfterError());
@@ -761,22 +753,9 @@ public abstract class AuthBiometricView extends LinearLayout {
             final View child = getChildAt(i);
 
             if (child.getId() == R.id.biometric_icon) {
-                if (this instanceof AuthBiometricFingerprintView && mHasFod) {
-                    final int buttonBarHeight =
-                            findViewById(R.id.button_bar).getLayoutParams().height;
-                    // The view is invisible, so it still takes space and
-                    // we use that to adjust for the FOD icon
-                    final int fodHeight = Dependency.get(StatusBar.class).getFodHeight(true) -
-                            buttonBarHeight - findViewById(R.id.button_bar).getPaddingTop();
-
-                    child.measure(
-                            MeasureSpec.makeMeasureSpec(newWidth, MeasureSpec.AT_MOST),
-                            MeasureSpec.makeMeasureSpec(fodHeight, MeasureSpec.EXACTLY));
-                } else {
-                    child.measure(
-                            MeasureSpec.makeMeasureSpec(newWidth, MeasureSpec.AT_MOST),
-                            MeasureSpec.makeMeasureSpec(height, MeasureSpec.AT_MOST));
-                }
+                child.measure(
+                        MeasureSpec.makeMeasureSpec(newWidth, MeasureSpec.AT_MOST),
+                        MeasureSpec.makeMeasureSpec(height, MeasureSpec.AT_MOST));
             } else if (child.getId() == R.id.button_bar) {
                 child.measure(
                         MeasureSpec.makeMeasureSpec(newWidth, MeasureSpec.EXACTLY),
diff --git a/packages/SystemUI/src/com/android/systemui/biometrics/FODCircleView.java b/packages/SystemUI/src/com/android/systemui/biometrics/FODCircleView.java
deleted file mode 100644
index 2b2ea38d99d..00000000000
--- a/packages/SystemUI/src/com/android/systemui/biometrics/FODCircleView.java
+++ /dev/null
@@ -1,742 +0,0 @@
-/**
- * Copyright (C) 2019-2020 The LineageOS Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.android.systemui.biometrics;
-
-import android.app.admin.DevicePolicyManager;
-import android.content.Context;
-import android.content.Intent;
-import android.content.res.Configuration;
-import android.content.res.Resources;
-import android.graphics.Canvas;
-import android.graphics.Color;
-import android.graphics.Paint;
-import android.graphics.PixelFormat;
-import android.graphics.Point;
-import android.hardware.biometrics.BiometricSourceType;
-import android.net.Uri;
-import android.os.Handler;
-import android.os.UserHandle;
-import android.os.Looper;
-import android.os.PowerManager;
-import android.os.RemoteException;
-import android.os.SystemClock;
-import android.provider.Settings;
-import android.util.DisplayMetrics;
-import android.view.Display;
-import android.view.Gravity;
-import android.view.LayoutInflater;
-import android.view.MotionEvent;
-import android.view.Surface;
-import android.view.View;
-import android.view.WindowManager;
-import android.widget.ImageView;
-
-import com.android.internal.util.crdroid.Utils;
-import com.android.internal.widget.LockPatternUtils;
-import com.android.keyguard.KeyguardSecurityModel.SecurityMode;
-import com.android.keyguard.KeyguardUpdateMonitor;
-import com.android.keyguard.KeyguardUpdateMonitorCallback;
-import com.android.systemui.Dependency;
-import com.android.systemui.R;
-import com.android.systemui.tuner.TunerService;
-
-import vendor.lineage.biometrics.fingerprint.inscreen.V1_0.IFingerprintInscreen;
-import vendor.lineage.biometrics.fingerprint.inscreen.V1_0.IFingerprintInscreenCallback;
-
-import java.util.NoSuchElementException;
-import java.util.Timer;
-import java.util.TimerTask;
-
-public class FODCircleView extends ImageView implements TunerService.Tunable {
-    private static final int FADE_ANIM_DURATION = 125;
-    private static final String DOZE_INTENT = "com.android.systemui.doze.pulse";
-
-    private static final String FOD_GESTURE =
-            "system:" + Settings.System.FOD_GESTURE;
-    private static final String DOZE_ENABLED =
-            Settings.Secure.DOZE_ENABLED;
-    private static final String FOD_ANIM =
-            "system:" + Settings.System.FOD_ANIM;
-    private static final String FOD_RECOGNIZING_ANIMATION =
-            "system:" + Settings.System.FOD_RECOGNIZING_ANIMATION;
-    private static final String FOD_ICON =
-            "system:" + Settings.System.FOD_ICON;
-    private static final String FOD_COLOR =
-            "system:" + Settings.System.FOD_COLOR;
-
-    private final int mPositionX;
-    private final int mPositionY;
-    private final int mSize;
-    private final int mDreamingMaxOffset;
-    private final int mNavigationBarSize;
-    private final boolean mShouldBoostBrightness;
-    private final Paint mPaintFingerprintBackground = new Paint();
-    private final WindowManager.LayoutParams mParams = new WindowManager.LayoutParams();
-    private final WindowManager.LayoutParams mPressedParams = new WindowManager.LayoutParams();
-    private final WindowManager mWindowManager;
-
-    private IFingerprintInscreen mFingerprintInscreenDaemon;
-
-    private int mDreamingOffsetX;
-    private int mColorBackground;
-    private int mDreamingOffsetY;
-
-    private boolean mFading;
-    private boolean mIsBouncer;
-    private boolean mIsBiometricRunning;
-    private boolean mIsCircleShowing;
-    private boolean mIsDreaming;
-    private boolean mIsKeyguard;
-    private boolean mTouchedOutside;
-
-    private boolean mDozeEnabled;
-    private boolean mDozeEnabledByDefault;
-    private boolean mFodGestureEnable;
-    private boolean mPressPending;
-    private boolean mScreenTurnedOn;
-
-    private PowerManager mPowerManager;
-    private PowerManager.WakeLock mWakeLock;
-
-    private Handler mHandler;
-
-    private final ImageView mPressedView;
-
-    private LockPatternUtils mLockPatternUtils;
-
-    private Timer mBurnInProtectionTimer;
-
-    private FODAnimation mFODAnimation;
-    private boolean mIsRecognizingAnimEnabled;
-    private int mFodAnim = 0;
-
-    private int mSelectedIcon;
-    private final int[] ICON_STYLES = {
-        R.drawable.fod_icon_default,
-        R.drawable.fod_icon_default_0,
-        R.drawable.fod_icon_default_1,
-        R.drawable.fod_icon_default_2,
-        R.drawable.fod_icon_default_3,
-        R.drawable.fod_icon_default_4,
-        R.drawable.fod_icon_default_5,
-        R.drawable.fod_icon_arc_reactor,
-        R.drawable.fod_icon_cpt_america_flat,
-        R.drawable.fod_icon_cpt_america_flat_gray,
-        R.drawable.fod_icon_dragon_black_flat,
-        R.drawable.fod_icon_cr1,
-        R.drawable.fod_icon_glow_circle,
-        R.drawable.fod_icon_neon_arc,
-        R.drawable.fod_icon_neon_arc_gray,
-        R.drawable.fod_icon_neon_circle_pink,
-        R.drawable.fod_icon_neon_triangle,
-        R.drawable.fod_icon_paint_splash_circle,
-        R.drawable.fod_icon_rainbow_horn,
-        R.drawable.fod_icon_shooky,
-        R.drawable.fod_icon_spiral_blue,
-        R.drawable.fod_icon_sun_metro,
-        R.drawable.fod_icon_scratch_pink_blue,
-        R.drawable.fod_icon_scratch_red_blue,
-        R.drawable.fod_icon_fire_ice_ouroboros,
-        R.drawable.fod_icon_light,
-        R.drawable.fod_icon_gxzw,
-        R.drawable.fod_icon_transparent
-    };
-
-    private int mDefaultPressedColor;
-    private int mPressedColor;
-    private final int[] PRESSED_COLOR = {
-        R.drawable.fod_icon_pressed,
-        R.drawable.fod_icon_pressed_cyan,
-        R.drawable.fod_icon_pressed_green,
-        R.drawable.fod_icon_pressed_yellow,
-        R.drawable.fod_icon_pressed_light_yellow
-    };
-
-    private IFingerprintInscreenCallback mFingerprintInscreenCallback =
-            new IFingerprintInscreenCallback.Stub() {
-        @Override
-        public void onFingerDown() {
-            if (mFodGestureEnable && !mScreenTurnedOn) {
-                if (mDozeEnabled) {
-                    mHandler.post(() -> mContext.sendBroadcast(new Intent(DOZE_INTENT)));
-                } else {
-                    mWakeLock.acquire(3000);
-                    mHandler.post(() -> mPowerManager.wakeUp(SystemClock.uptimeMillis(),
-                        PowerManager.WAKE_REASON_GESTURE, FODCircleView.class.getSimpleName()));
-                }
-                mPressPending = true;
-            } else {
-                mHandler.post(() -> showCircle());
-            }
-        }
-
-        @Override
-        public void onFingerUp() {
-            mHandler.post(() -> hideCircle());
-            if (mPressPending) {
-                mPressPending = false;
-            }
-        }
-    };
-
-    private KeyguardUpdateMonitor mUpdateMonitor;
-
-    private KeyguardUpdateMonitorCallback mMonitorCallback = new KeyguardUpdateMonitorCallback() {
-        @Override
-        public void onBiometricAuthenticated(int userId, BiometricSourceType biometricSourceType,
-                boolean isStrongBiometric) {
-            // We assume that if biometricSourceType matches Fingerprint it will be
-            // handled here, so we hide only when other biometric types authenticate
-            if (biometricSourceType != BiometricSourceType.FINGERPRINT) {
-                hide();
-            }
-        }
-
-        @Override
-        public void onBiometricRunningStateChanged(boolean running,
-                BiometricSourceType biometricSourceType) {
-            if (biometricSourceType == BiometricSourceType.FINGERPRINT) {
-                mIsBiometricRunning = running;
-                if (!mIsBiometricRunning)
-                    hide();
-            }
-        }
-
-        @Override
-        public void onDreamingStateChanged(boolean dreaming) {
-            mIsDreaming = dreaming;
-            updateAlpha();
-
-            if (mIsKeyguard && mIsBiometricRunning) {
-                show();
-                updateAlpha();
-            }
-
-            if (dreaming) {
-                mBurnInProtectionTimer = new Timer();
-                mBurnInProtectionTimer.schedule(new BurnInProtectionTask(), 0, 60 * 1000);
-            } else if (mBurnInProtectionTimer != null) {
-                mBurnInProtectionTimer.cancel();
-            }
-        }
-
-        @Override
-        public void onKeyguardVisibilityChanged(boolean showing) {
-            mIsKeyguard = showing;
-            if (!showing) {
-                hide();
-            } else {
-                updateAlpha();
-            }
-            if (mFODAnimation != null && mIsRecognizingAnimEnabled) {
-                mFODAnimation.setAnimationKeyguard(mIsKeyguard);
-            }
-        }
-
-        @Override
-        public void onKeyguardBouncerChanged(boolean isBouncer) {
-            mIsBouncer = isBouncer;
-            if (mIsBiometricRunning) {
-                if (isPinOrPattern(mUpdateMonitor.getCurrentUser()) || !isBouncer) {
-                    show();
-                } else {
-                    hide();
-                }
-            }
-        }
-
-        @Override
-        public void onScreenTurnedOff() {
-            mScreenTurnedOn = false;
-            if (!mFodGestureEnable) {
-                hide();
-            } else {
-                hideCircle();
-            }
-        }
-
-        @Override
-        public void onStartedWakingUp() {
-            if (mIsBiometricRunning) {
-                show();
-            }
-        }
-
-        @Override
-        public void onScreenTurnedOn() {
-            if (mIsBiometricRunning) {
-                if (!mFodGestureEnable) {
-                    show();
-                } else if (mPressPending) {
-                    mHandler.post(() -> showCircle());
-                    mPressPending = false;
-                }
-            }    
-            mScreenTurnedOn = true;
-        }
-
-        @Override
-        public void onBiometricHelp(int msgId, String helpString,
-                BiometricSourceType biometricSourceType) {
-            if (msgId == -1 && mFODAnimation != null && mIsRecognizingAnimEnabled) { // Auth error
-                mHandler.post(() -> mFODAnimation.hideFODanimation());
-            }
-        }
-    };
-
-    public FODCircleView(Context context) {
-        super(context);
-
-        IFingerprintInscreen daemon = getFingerprintInScreenDaemon();
-        if (daemon == null) {
-            throw new RuntimeException("Unable to get IFingerprintInscreen");
-        }
-
-        try {
-            mShouldBoostBrightness = daemon.shouldBoostBrightness();
-            mPositionX = daemon.getPositionX();
-            mPositionY = daemon.getPositionY();
-            mSize = daemon.getSize();
-        } catch (RemoteException e) {
-            throw new RuntimeException("Failed to retrieve FOD circle position or size");
-        }
-
-        Resources res = context.getResources();
-
-        mColorBackground = res.getColor(R.color.config_fodColorBackground);
-        mDefaultPressedColor = res.getInteger(com.android.internal.R.
-             integer.config_fod_pressed_color);
-        mPaintFingerprintBackground.setColor(mColorBackground);
-        mPaintFingerprintBackground.setAntiAlias(true);
-
-        mPowerManager = context.getSystemService(PowerManager.class);
-        mWakeLock = mPowerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,
-                 FODCircleView.class.getSimpleName());
-
-        mWindowManager = context.getSystemService(WindowManager.class);
-
-        mNavigationBarSize = res.getDimensionPixelSize(R.dimen.navigation_bar_size);
-
-        mDreamingMaxOffset = (int) (mSize * 0.1f);
-
-        mHandler = new Handler(Looper.getMainLooper());
-
-        mParams.height = mSize;
-        mParams.width = mSize;
-        mParams.format = PixelFormat.TRANSLUCENT;
-
-        mParams.packageName = "android";
-        mParams.type = WindowManager.LayoutParams.TYPE_SYSTEM_FINGERPRINT;
-        mParams.flags = WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE |
-                WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN |
-                WindowManager.LayoutParams.FLAG_WATCH_OUTSIDE_TOUCH;
-        mParams.gravity = Gravity.TOP | Gravity.LEFT;
-
-        mPressedParams.copyFrom(mParams);
-        mPressedParams.type = WindowManager.LayoutParams.TYPE_SYSTEM_FINGERPRINT_HIGH_LIGHT;
-        mPressedParams.flags |= WindowManager.LayoutParams.FLAG_DIM_BEHIND |
-                WindowManager.LayoutParams.FLAG_WATCH_OUTSIDE_TOUCH;
-
-        mParams.setTitle("Fingerprint on display");
-        mPressedParams.setTitle("Fingerprint on display.touched");
-
-        mPressedView = new ImageView(context)  {
-            @Override
-            protected void onDraw(Canvas canvas) {
-                if (mIsCircleShowing) {
-                    setImageResource(PRESSED_COLOR[mPressedColor]);
-                }
-                super.onDraw(canvas);
-            }
-        };
-
-        mWindowManager.addView(this, mParams);
-
-        hide();
-
-        mLockPatternUtils = new LockPatternUtils(mContext);
-
-        mUpdateMonitor = Dependency.get(KeyguardUpdateMonitor.class);
-        mUpdateMonitor.registerCallback(mMonitorCallback);
-
-        boolean isFodAnimationAvailable = Utils.isPackageInstalled(context,
-                                    context.getResources().getString(
-                                    com.android.internal.R.string.config_fodAnimationPackage));
-        if (isFodAnimationAvailable) {
-            mFODAnimation = new FODAnimation(context, mPositionX, mPositionY);
-        }
-
-        mDozeEnabledByDefault = mContext.getResources().getBoolean(
-                    com.android.internal.R.bool.config_doze_enabled_by_default);
-
-        Dependency.get(TunerService.class).addTunable(this,
-                FOD_GESTURE,
-                DOZE_ENABLED,
-                FOD_ANIM,
-                FOD_RECOGNIZING_ANIMATION,
-                FOD_ICON,
-                FOD_COLOR);
-    }
-
-    @Override
-    public void onTuningChanged(String key, String newValue) {
-        switch (key) {
-            case FOD_GESTURE:
-                mFodGestureEnable =
-                        TunerService.parseIntegerSwitch(newValue, false);
-                break;
-            case DOZE_ENABLED:
-                mDozeEnabled =
-                        TunerService.parseIntegerSwitch(newValue, mDozeEnabledByDefault);
-                break;
-            case FOD_ANIM:
-                mFodAnim =
-                        TunerService.parseInteger(newValue, 0);
-                if (mFODAnimation != null) {
-                    mFODAnimation.update(mIsRecognizingAnimEnabled, mFodAnim);
-                }
-                break;
-            case FOD_RECOGNIZING_ANIMATION:
-                mIsRecognizingAnimEnabled =
-                        TunerService.parseIntegerSwitch(newValue, false);
-                if (mFODAnimation != null) {
-                    mFODAnimation.update(mIsRecognizingAnimEnabled, mFodAnim);
-                }
-                break;
-            case FOD_ICON:
-                mSelectedIcon =
-                        TunerService.parseInteger(newValue, 0);
-                break;
-            case FOD_COLOR:
-                mPressedColor =
-                        TunerService.parseInteger(newValue, mDefaultPressedColor);
-                break;
-            default:
-                break;
-        }
-    }
-
-    @Override
-    protected void onDraw(Canvas canvas) {
-        if (!mIsCircleShowing) {
-            canvas.drawCircle(mSize / 2, mSize / 2, mSize / 2.0f, mPaintFingerprintBackground);
-        }
-        super.onDraw(canvas);
-    }
-
-    @Override
-    public boolean onTouchEvent(MotionEvent event) {
-        float x = event.getAxisValue(MotionEvent.AXIS_X);
-        float y = event.getAxisValue(MotionEvent.AXIS_Y);
-
-        boolean newIsInside = (x > 0 && x < mSize) && (y > 0 && y < mSize);
-        mTouchedOutside = false;
-
-        if (event.getAction() == MotionEvent.ACTION_OUTSIDE) {
-            mTouchedOutside = true;
-            return true;
-        }
-
-        if (event.getAction() == MotionEvent.ACTION_DOWN && newIsInside) {
-            showCircle();
-            return true;
-        } else if (event.getAction() == MotionEvent.ACTION_UP) {
-            hideCircle();
-            return true;
-        } else if (event.getAction() == MotionEvent.ACTION_MOVE) {
-            return true;
-        }
-
-        if (mFODAnimation != null && mIsRecognizingAnimEnabled) {
-            mHandler.post(() -> mFODAnimation.hideFODanimation());
-        }
-        return false;
-    }
-
-    @Override
-    public void onConfigurationChanged(Configuration newConfig) {
-        updatePosition();
-    }
-
-    public IFingerprintInscreen getFingerprintInScreenDaemon() {
-        if (mFingerprintInscreenDaemon == null) {
-            try {
-                mFingerprintInscreenDaemon = IFingerprintInscreen.getService();
-                if (mFingerprintInscreenDaemon != null) {
-                    mFingerprintInscreenDaemon.setCallback(mFingerprintInscreenCallback);
-                    mFingerprintInscreenDaemon.asBinder().linkToDeath((cookie) -> {
-                        mFingerprintInscreenDaemon = null;
-                    }, 0);
-                }
-            } catch (NoSuchElementException | RemoteException e) {
-                // do nothing
-            }
-        }
-        return mFingerprintInscreenDaemon;
-    }
-
-    public void dispatchPress() {
-        if (mFading) return;
-        IFingerprintInscreen daemon = getFingerprintInScreenDaemon();
-        try {
-            daemon.onPress();
-        } catch (RemoteException e) {
-            // do nothing
-        }
-    }
-
-    public void dispatchRelease() {
-        IFingerprintInscreen daemon = getFingerprintInScreenDaemon();
-        try {
-            daemon.onRelease();
-        } catch (RemoteException e) {
-            // do nothing
-        }
-    }
-
-    public void dispatchShow() {
-        IFingerprintInscreen daemon = getFingerprintInScreenDaemon();
-        try {
-            daemon.onShowFODView();
-        } catch (RemoteException e) {
-            // do nothing
-        }
-    }
-
-    public void dispatchHide() {
-        IFingerprintInscreen daemon = getFingerprintInScreenDaemon();
-        try {
-            daemon.onHideFODView();
-        } catch (RemoteException e) {
-            // do nothing
-        }
-    }
-
-    public void showCircle() {
-        if (mFading || mTouchedOutside) return;
-        mIsCircleShowing = true;
-
-        setKeepScreenOn(true);
-
-        setDim(true);
-        dispatchPress();
-
-        if (mFODAnimation != null && mIsRecognizingAnimEnabled) {
-            mHandler.post(() -> mFODAnimation.showFODanimation());
-        }
-
-        setImageDrawable(null);
-        invalidate();
-    }
-
-    public void hideCircle() {
-        mIsCircleShowing = false;
-
-        setImageResource(ICON_STYLES[mSelectedIcon]);
-        invalidate();
-
-        dispatchRelease();
-        setDim(false);
-
-        if (mFODAnimation != null && mIsRecognizingAnimEnabled) {
-            mHandler.post(() -> mFODAnimation.hideFODanimation());
-        }
-
-        setKeepScreenOn(false);
-    }
-
-    public void show() {
-        if (mUpdateMonitor.userNeedsStrongAuth()) {
-            // Keyguard requires strong authentication (not biometrics)
-            return;
-        }
-
-        if (!mUpdateMonitor.isScreenOn() && !mFodGestureEnable) {
-            // Keyguard is shown just after screen turning off
-            return;
-        }
-
-        if (mIsBouncer && !isPinOrPattern(mUpdateMonitor.getCurrentUser())) {
-            // Ignore show calls when Keyguard password screen is being shown
-            return;
-        }
-
-        if (mIsKeyguard && mUpdateMonitor.getUserCanSkipBouncer(mUpdateMonitor.getCurrentUser())) {
-            // Ignore show calls if user can skip bouncer
-            return;
-        }
-
-        if (mIsKeyguard && !mIsBiometricRunning) {
-            return;
-        }
-
-        updatePosition();
-
-        setVisibility(View.VISIBLE);
-        animate().withStartAction(() -> mFading = true)
-                .alpha(mIsDreaming ? 0.5f : 1.0f)
-                .setDuration(FADE_ANIM_DURATION)
-                .withEndAction(() -> mFading = false)
-                .start();
-        dispatchShow();
-    }
-
-    public void hide() {
-        animate().withStartAction(() -> mFading = true)
-                .alpha(0)
-                .setDuration(FADE_ANIM_DURATION)
-                .withEndAction(() -> {
-                    setVisibility(View.GONE);
-                    mFading = false;
-                })
-                .start();
-        hideCircle();
-        dispatchHide();
-    }
-
-    public int getHeight(boolean includeDecor) {
-        DisplayMetrics dm = new DisplayMetrics();
-        if (includeDecor) {
-            mWindowManager.getDefaultDisplay().getMetrics(dm);
-        } else {
-            mWindowManager.getDefaultDisplay().getRealMetrics(dm);
-        }
-        return dm.heightPixels - mPositionY + mSize / 2;
-    }
-
-    private void updateAlpha() {
-        setAlpha(mIsDreaming ? 0.5f : 1.0f);
-    }
-
-    private void updatePosition() {
-        Display defaultDisplay = mWindowManager.getDefaultDisplay();
-
-        Point size = new Point();
-        defaultDisplay.getRealSize(size);
-
-        int rotation = defaultDisplay.getRotation();
-        int x, y;
-        switch (rotation) {
-            case Surface.ROTATION_0:
-                x = mPositionX;
-                y = mPositionY;
-                break;
-            case Surface.ROTATION_90:
-                x = mPositionY;
-                y = mPositionX;
-                break;
-            case Surface.ROTATION_180:
-                x = mPositionX;
-                y = size.y - mPositionY - mSize;
-                break;
-            case Surface.ROTATION_270:
-                x = size.x - mPositionY - mSize - mNavigationBarSize;
-                y = mPositionX;
-                break;
-            default:
-                throw new IllegalArgumentException("Unknown rotation: " + rotation);
-        }
-
-        mPressedParams.x = mParams.x = x;
-        mPressedParams.y = mParams.y = y;
-
-        if (mIsDreaming) {
-            mParams.x += mDreamingOffsetX;
-            mParams.y += mDreamingOffsetY;
-            if (mFODAnimation != null && mIsRecognizingAnimEnabled) {
-                mFODAnimation.updateParams(mParams.y);
-            }
-        }
-
-        mWindowManager.updateViewLayout(this, mParams);
-
-        if (mPressedView.getParent() != null) {
-            mWindowManager.updateViewLayout(mPressedView, mPressedParams);
-        }
-    }
-
-    private void setDim(boolean dim) {
-        if (dim) {
-            int curBrightness = Settings.System.getInt(getContext().getContentResolver(),
-                    Settings.System.SCREEN_BRIGHTNESS, 100);
-            int dimAmount = 0;
-
-            IFingerprintInscreen daemon = getFingerprintInScreenDaemon();
-            try {
-                dimAmount = daemon.getDimAmount(curBrightness);
-            } catch (RemoteException e) {
-                // do nothing
-            }
-
-            if (mShouldBoostBrightness) {
-                mPressedParams.screenBrightness = 1.0f;
-            }
-
-            mPressedParams.dimAmount = dimAmount / 255.0f;
-            if (mPressedView.getParent() == null) {
-                mWindowManager.addView(mPressedView, mPressedParams);
-            } else {
-                mWindowManager.updateViewLayout(mPressedView, mPressedParams);
-            }
-        } else {
-            if (mShouldBoostBrightness) {
-                mPressedParams.screenBrightness = 0.0f;
-            }
-            mPressedParams.dimAmount = 0.0f;
-            if (mPressedView.getParent() != null) {
-                mWindowManager.removeView(mPressedView);
-            }
-        }
-    }
-
-    private boolean isPinOrPattern(int userId) {
-        int passwordQuality = mLockPatternUtils.getActivePasswordQuality(userId);
-        switch (passwordQuality) {
-            // PIN
-            case DevicePolicyManager.PASSWORD_QUALITY_NUMERIC:
-            case DevicePolicyManager.PASSWORD_QUALITY_NUMERIC_COMPLEX:
-            // Pattern
-            case DevicePolicyManager.PASSWORD_QUALITY_SOMETHING:
-                return true;
-        }
-
-        return false;
-    }
-
-    private class BurnInProtectionTask extends TimerTask {
-        @Override
-        public void run() {
-            long now = System.currentTimeMillis() / 1000 / 60;
-
-            mDreamingOffsetX = (int) (now % (mDreamingMaxOffset * 4));
-            if (mDreamingOffsetX > mDreamingMaxOffset * 2) {
-                mDreamingOffsetX = mDreamingMaxOffset * 4 - mDreamingOffsetX;
-            }
-
-            // Let y to be not synchronized with x, so that we get maximum movement
-            mDreamingOffsetY = (int) ((now + mDreamingMaxOffset / 3) % (mDreamingMaxOffset * 2));
-            if (mDreamingOffsetY > mDreamingMaxOffset * 2) {
-                mDreamingOffsetY = mDreamingMaxOffset * 4 - mDreamingOffsetY;
-            }
-
-            mDreamingOffsetX -= mDreamingMaxOffset;
-            mDreamingOffsetY -= mDreamingMaxOffset;
-
-            mHandler.post(() -> updatePosition());
-        }
-    };
-}
diff --git a/packages/SystemUI/src/com/android/systemui/biometrics/FODCircleViewImpl.java b/packages/SystemUI/src/com/android/systemui/biometrics/FODCircleViewImpl.java
deleted file mode 100644
index 2c923571905..00000000000
--- a/packages/SystemUI/src/com/android/systemui/biometrics/FODCircleViewImpl.java
+++ /dev/null
@@ -1,174 +0,0 @@
-/**
- * Copyright (C) 2019 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.android.systemui.biometrics;
-
-import android.content.Context;
-import android.content.pm.PackageManager;
-import android.content.res.Resources;
-import android.hardware.display.ColorDisplayManager;
-import android.os.Handler;
-import android.os.SystemProperties;
-import android.provider.Settings;
-import android.util.Slog;
-import android.view.View;
-
-import com.android.internal.R;
-import com.android.internal.util.crdroid.FodUtils;
-
-import com.android.systemui.SystemUI;
-import com.android.systemui.biometrics.FODCircleViewImplCallback;
-import com.android.systemui.statusbar.CommandQueue;
-import com.android.systemui.util.Assert;
-
-import lineageos.app.LineageContextConstants;
-
-import java.lang.ref.WeakReference;
-import java.util.ArrayList;
-import javax.inject.Inject;
-import javax.inject.Singleton;
-
-@Singleton
-public class FODCircleViewImpl extends SystemUI implements CommandQueue.Callbacks {
-    private static final String TAG = "FODCircleViewImpl";
-
-    private FODCircleView mFodCircleView;
-
-    private final ArrayList<WeakReference<FODCircleViewImplCallback>>
-            mCallbacks = new ArrayList<>();
-    private final CommandQueue mCommandQueue;
-    private boolean mDisableNightMode;
-    private boolean mNightModeActive;
-    private int mAutoModeState;
-
-    private boolean mIsFODVisible;
-
-    @Inject
-    public FODCircleViewImpl(Context context, CommandQueue commandQueue) {
-        super(context);
-        mCommandQueue = commandQueue;
-    }
-
-    @Override
-    public void start() {
-        PackageManager packageManager = mContext.getPackageManager();
-        if (!packageManager.hasSystemFeature(PackageManager.FEATURE_FINGERPRINT) ||
-                !(packageManager.hasSystemFeature(LineageContextConstants.Features.FOD) || FodUtils.hasFodSupport(mContext))) {
-            return;
-        }
-        mCommandQueue.addCallback(this);
-        try {
-            mFodCircleView = new FODCircleView(mContext);
-            for (int i = 0; i < mCallbacks.size(); i++) {
-                FODCircleViewImplCallback cb = mCallbacks.get(i).get();
-                if (cb != null) {
-                    cb.onFODStart();
-                }
-            }
-        } catch (RuntimeException e) {
-            Slog.e(TAG, "Failed to initialize FODCircleView", e);
-        }
-        mDisableNightMode = mContext.getResources().getBoolean(R.bool.disable_fod_night_light);
-    }
-
-    @Override
-    public void showInDisplayFingerprintView() {
-        if (mFodCircleView != null) {
-            for (int i = 0; i < mCallbacks.size(); i++) {
-                FODCircleViewImplCallback cb = mCallbacks.get(i).get();
-                if (cb != null) {
-                    cb.onFODStatusChange(true);
-                }
-            }
-            mIsFODVisible = true;
-            if (mDisableNightMode && isNightLightEnabled()) {
-                disableNightMode();
-            }
-            mFodCircleView.show();
-        }
-    }
-
-    private boolean isNightLightEnabled() {
-       return Settings.System.getInt(mContext.getContentResolver(),
-                Settings.System.FOD_NIGHT_LIGHT, 1) == 1;
-    }
-    
-    @Override
-    public void hideInDisplayFingerprintView() {
-        if (mFodCircleView != null) {
-            if (!mDisableNightMode) {
-                for (int i = 0; i < mCallbacks.size(); i++) {
-                    FODCircleViewImplCallback cb = mCallbacks.get(i).get();
-                    if (cb != null) {
-                        cb.onFODStatusChange(false);
-                    }
-                }
-            }
-            mIsFODVisible = false;
-            if (mDisableNightMode && isNightLightEnabled()) {
-                setNightMode(mNightModeActive, mAutoModeState);
-            }
-            mFodCircleView.hide();
-        }
-    }
-
-    public int getHeight(boolean includeDecor) {
-         return mFodCircleView.getHeight(includeDecor);
-    }
-
-    public void registerCallback(FODCircleViewImplCallback callback) {
-        Assert.isMainThread();
-        Slog.v(TAG, "*** register callback for " + callback);
-        for (int i = 0; i < mCallbacks.size(); i++) {
-            if (mCallbacks.get(i).get() == callback) {
-                Slog.e(TAG, "Object tried to add another callback",
-                        new Exception("Called by"));
-                return;
-            }
-        }
-        mCallbacks.add(new WeakReference<>(callback));
-        removeCallback(null);
-        sendUpdates(callback);
-    }
-
-    public void removeCallback(FODCircleViewImplCallback callback) {
-        Assert.isMainThread();
-        Slog.v(TAG, "*** unregister callback for " + callback);
-        mCallbacks.removeIf(el -> el.get() == callback);
-    }
-
-    private void sendUpdates(FODCircleViewImplCallback callback) {
-        callback.onFODStart();
-        callback.onFODStatusChange(mIsFODVisible);
-    }
-
-   private void disableNightMode() {
-        ColorDisplayManager colorDisplayManager = mContext.getSystemService(ColorDisplayManager.class);
-        mAutoModeState = colorDisplayManager.getNightDisplayAutoMode();
-        mNightModeActive = colorDisplayManager.isNightDisplayActivated();
-        colorDisplayManager.setNightDisplayActivated(false);
-    }
-
-    private void setNightMode(boolean activated, int autoMode) {
-        ColorDisplayManager colorDisplayManager = mContext.getSystemService(ColorDisplayManager.class);
-        colorDisplayManager.setNightDisplayAutoMode(0);
-        if (autoMode == 0) {
-            colorDisplayManager.setNightDisplayActivated(activated);
-        } else if (autoMode == 1 || autoMode == 2) {
-            colorDisplayManager.setNightDisplayAutoMode(autoMode);
-        }
-    }
-}
diff --git a/packages/SystemUI/src/com/android/systemui/biometrics/FODCircleViewImplCallback.java b/packages/SystemUI/src/com/android/systemui/biometrics/FODCircleViewImplCallback.java
deleted file mode 100644
index 5c11fb9061e..00000000000
--- a/packages/SystemUI/src/com/android/systemui/biometrics/FODCircleViewImplCallback.java
+++ /dev/null
@@ -1,25 +0,0 @@
-/**
- * Copyright (C) 2021 The LineageOS Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.android.systemui.biometrics;
-
-public class FODCircleViewImplCallback {
-
-    public void onFODStart() {}
-
-    public void onFODStatusChange(boolean isVisible) {}
-
-}
diff --git a/packages/SystemUI/src/com/android/systemui/dagger/SystemUIBinder.java b/packages/SystemUI/src/com/android/systemui/dagger/SystemUIBinder.java
index a0a2e6f0dd6..413a522bccd 100644
--- a/packages/SystemUI/src/com/android/systemui/dagger/SystemUIBinder.java
+++ b/packages/SystemUI/src/com/android/systemui/dagger/SystemUIBinder.java
@@ -24,7 +24,6 @@ import com.android.systemui.SystemUI;
 import com.android.systemui.accessibility.SystemActions;
 import com.android.systemui.accessibility.WindowMagnification;
 import com.android.systemui.biometrics.AuthController;
-import com.android.systemui.biometrics.FODCircleViewImpl;
 import com.android.systemui.bubbles.dagger.BubbleModule;
 import com.android.systemui.globalactions.GlobalActionsComponent;
 import com.android.systemui.keyguard.KeyguardViewMediator;
@@ -67,12 +66,6 @@ public abstract class SystemUIBinder {
     @ClassKey(Divider.class)
     public abstract SystemUI bindDivider(Divider sysui);
 
-    /** Inject into FODCircleViewImpl. */
-    @Binds
-    @IntoMap
-    @ClassKey(FODCircleViewImpl.class)
-    public abstract SystemUI FODCircleViewImpl(FODCircleViewImpl sysui);
-
     /** Inject into GarbageMonitor.Service. */
     @Binds
     @IntoMap
diff --git a/packages/SystemUI/src/com/android/systemui/keyguard/KeyguardViewMediator.java b/packages/SystemUI/src/com/android/systemui/keyguard/KeyguardViewMediator.java
index 85f4f435c20..2a0ce3ecc77 100644
--- a/packages/SystemUI/src/com/android/systemui/keyguard/KeyguardViewMediator.java
+++ b/packages/SystemUI/src/com/android/systemui/keyguard/KeyguardViewMediator.java
@@ -38,7 +38,6 @@ import android.content.ContentResolver;
 import android.content.Context;
 import android.content.Intent;
 import android.content.IntentFilter;
-import android.content.pm.PackageManager;
 import android.content.pm.UserInfo;
 import android.hardware.biometrics.BiometricSourceType;
 import android.media.AudioAttributes;
@@ -103,7 +102,6 @@ import com.android.systemui.statusbar.phone.StatusBar;
 import com.android.systemui.util.DeviceConfigProxy;
 import com.android.systemui.util.InjectionInflationController;
 
-import lineageos.app.LineageContextConstants;
 import lineageos.app.Profile;
 import lineageos.app.ProfileManager;
 
@@ -388,8 +386,6 @@ public class KeyguardViewMediator extends SystemUI implements Dumpable {
     private IKeyguardDrawnCallback mDrawnCallback;
     private CharSequence mCustomMessage;
 
-    private boolean mHasFod;
-
     private final DeviceConfig.OnPropertiesChangedListener mOnPropertiesChangedListener =
             new DeviceConfig.OnPropertiesChangedListener() {
             @Override
@@ -758,12 +754,6 @@ public class KeyguardViewMediator extends SystemUI implements Dumpable {
                 QuickStepContract.isGesturalMode(navigationModeController.addListener(mode -> {
                     mInGestureNavigationMode = QuickStepContract.isGesturalMode(mode);
                 }));
-        PackageManager packageManager = context.getPackageManager();
-        if (packageManager.hasSystemFeature(LineageContextConstants.Features.FOD) || FodUtils.hasFodSupport(context)){
-            mHasFod = true;
-        }else{
-            mHasFod = false;
-        }
     }
 
     public void userActivity() {
@@ -896,9 +886,7 @@ public class KeyguardViewMediator extends SystemUI implements Dumpable {
             // explicitly DO NOT want to call
             // mKeyguardViewControllerLazy.get().setKeyguardGoingAwayState(false)
             // here, since that will mess with the device lock state.
-            if (!mHasFod) {
-                mUpdateMonitor.dispatchKeyguardGoingAway(false);
-            }
+            mUpdateMonitor.dispatchKeyguardGoingAway(false);
 
             // Lock immediately based on setting if secure (user has a pin/pattern/password).
             // This also "locks" the device when not secure to provide easy access to the
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/CommandQueue.java b/packages/SystemUI/src/com/android/systemui/statusbar/CommandQueue.java
index 13d2dc256ed..96dae9c8ad9 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/CommandQueue.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/CommandQueue.java
@@ -126,8 +126,6 @@ public class CommandQueue extends IStatusBar.Stub implements CallbackController<
     private static final int MSG_HIDE_TOAST                        = 54 << MSG_SHIFT;
     private static final int MSG_TRACING_STATE_CHANGED             = 55 << MSG_SHIFT;
     private static final int MSG_SUPPRESS_AMBIENT_DISPLAY          = 56 << MSG_SHIFT;
-    private static final int MSG_SHOW_IN_DISPLAY_FINGERPRINT_VIEW  = 57 << MSG_SHIFT;
-    private static final int MSG_HIDE_IN_DISPLAY_FINGERPRINT_VIEW  = 58 << MSG_SHIFT;
     private static final int MSG_SET_BLOCKED_GESTURAL_NAVIGATION   = 59 << MSG_SHIFT;
     private static final int MSG_TOGGLE_CAMERA_FLASH               = 60 << MSG_SHIFT;
     private static final int MSG_SCREEN_PINNING_STATE_CHANGED      = 61 << MSG_SHIFT;
@@ -274,8 +272,6 @@ public class CommandQueue extends IStatusBar.Stub implements CallbackController<
         default void onBiometricHelp(String message) { }
         default void onBiometricError(int modality, int error, int vendorCode) { }
         default void hideAuthenticationDialog() { }
-        default void showInDisplayFingerprintView() { }
-        default void hideInDisplayFingerprintView() { }
         default void setBlockedGesturalNavigation(boolean blocked) {}
         default void toggleCameraFlash() { }
 
@@ -870,20 +866,6 @@ public class CommandQueue extends IStatusBar.Stub implements CallbackController<
         }
     }
 
-    @Override
-    public void showInDisplayFingerprintView() {
-        synchronized (mLock) {
-            mHandler.obtainMessage(MSG_SHOW_IN_DISPLAY_FINGERPRINT_VIEW).sendToTarget();
-        }
-    }
-
-    @Override
-    public void hideInDisplayFingerprintView() {
-        synchronized (mLock) {
-            mHandler.obtainMessage(MSG_HIDE_IN_DISPLAY_FINGERPRINT_VIEW).sendToTarget();
-        }
-    }
-
     @Override
     public void setBlockedGesturalNavigation(boolean blocked) {
         synchronized (mLock) {
@@ -1369,16 +1351,6 @@ public class CommandQueue extends IStatusBar.Stub implements CallbackController<
                         callbacks.suppressAmbientDisplay((boolean) msg.obj);
                     }
                     break;
-                case MSG_SHOW_IN_DISPLAY_FINGERPRINT_VIEW:
-                    for (int i = 0; i < mCallbacks.size(); i++) {
-                        mCallbacks.get(i).showInDisplayFingerprintView();
-                    }
-                    break;
-                case MSG_HIDE_IN_DISPLAY_FINGERPRINT_VIEW:
-                    for (int i = 0; i < mCallbacks.size(); i++) {
-                        mCallbacks.get(i).hideInDisplayFingerprintView();
-                    }
-                    break;
                 case MSG_SET_BLOCKED_GESTURAL_NAVIGATION:
                     for (int i = 0; i < mCallbacks.size(); i++) {
                         mCallbacks.get(i).setBlockedGesturalNavigation((Boolean) msg.obj);
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/KeyguardIndicationController.java b/packages/SystemUI/src/com/android/systemui/statusbar/KeyguardIndicationController.java
index ba21cd2fce5..0f37798effa 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/KeyguardIndicationController.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/KeyguardIndicationController.java
@@ -84,7 +84,6 @@ import javax.inject.Inject;
 import javax.inject.Singleton;
 
 import lineageos.app.LineageContextConstants;
-import vendor.lineage.biometrics.fingerprint.inscreen.V1_0.IFingerprintInscreen;
 
 /**
  * Controls the indications and error messages shown on the Keyguard
@@ -117,7 +116,6 @@ public class KeyguardIndicationController implements StateListener,
     private KeyguardIndicationTextView mDisclosure;
     private LottieAnimationView mChargingIndicationView;
     private int mChargingIndication = 1;
-    private int mFODPositionY = 0;
     private final IBatteryStats mBatteryInfo;
     private final SettableWakeLock mWakeLock;
     private final DockManager mDockManager;
@@ -228,17 +226,6 @@ public class KeyguardIndicationController implements StateListener,
         mChargingIndicationView = (LottieAnimationView) indicationArea.findViewById(
                 R.id.charging_indication);
         updateChargingIndicationStyle();
-        if (hasActiveInDisplayFp()) {
-            try {
-                IFingerprintInscreen daemon = IFingerprintInscreen.getService();
-                mFODPositionY = daemon.getPositionY();
-            } catch (RemoteException e) {
-                // do nothing
-            }
-            if (mFODPositionY <= 0) {
-                mFODPositionY = 0;
-            }
-        }
         mDisclosure = indicationArea.findViewById(R.id.keyguard_indication_enterprise_disclosure);
         mDisclosureMaxAlpha = mDisclosure.getAlpha();
         updateIndication(false /* animate */);
@@ -590,37 +577,6 @@ public class KeyguardIndicationController implements StateListener,
 
     private void updateChargingIndication() {
         if (mChargingIndication > 0 && !mDozing && mBatteryPresent && mPowerPluggedIn) {
-            if (hasActiveInDisplayFp()) {
-                if (mFODPositionY != 0) {
-                    // Get screen height
-                    WindowManager windowManager = mContext.getSystemService(WindowManager.class);
-                    Display defaultDisplay = windowManager.getDefaultDisplay();
-                    Point size = new Point();
-                    defaultDisplay.getRealSize(size);
-                    int screenHeight = size.y;
-                    // Correct FOD position if cutout is hidden
-                    int statusbarHeight = mContext.getResources().getDimensionPixelSize(
-                            com.android.internal.R.dimen.status_bar_height_portrait);
-                    boolean cutoutMasked = mContext.getResources().getBoolean(
-                            com.android.internal.R.bool.config_maskMainBuiltInDisplayCutout);
-                    int fodPositionY = mFODPositionY;
-                    if (cutoutMasked) {
-                        fodPositionY = mFODPositionY - statusbarHeight;
-                    }
-                    // Get indication text height
-                    int textViewHeight = mTextView.getMeasuredHeight();
-                    // Get bottom margin height
-                    int marginBottom = mContext.getResources().getDimensionPixelSize(
-                            R.dimen.keyguard_indication_margin_bottom_fingerprint_in_display);
-                    // Calculate charging indication margin
-                    int animationMargin = (screenHeight - fodPositionY) - (textViewHeight + marginBottom) + 10;
-                    // Set position of charging indication
-                    ViewGroup.MarginLayoutParams params =
-                            (ViewGroup.MarginLayoutParams) mChargingIndicationView.getLayoutParams();
-                    params.setMargins(0, 0, 0, animationMargin);
-                    mChargingIndicationView.setLayoutParams(params);
-                }
-            }
             mChargingIndicationView.setVisibility(View.VISIBLE);
             mChargingIndicationView.playAnimation();
         } else {
@@ -628,14 +584,6 @@ public class KeyguardIndicationController implements StateListener,
         }
     }
 
-    private boolean hasActiveInDisplayFp() {
-        PackageManager packageManager = mContext.getPackageManager();
-        boolean hasInDisplayFingerprint = packageManager.hasSystemFeature(LineageContextConstants.Features.FOD);
-        int userId = KeyguardUpdateMonitor.getCurrentUser();
-        FingerprintManager fpm = (FingerprintManager) mContext.getSystemService(Context.FINGERPRINT_SERVICE);
-        return hasInDisplayFingerprint && fpm.getEnrolledFingerprints(userId).size() > 0;
-    }
-
     // animates textView - textView moves up and bounces down
     private void animateText(KeyguardIndicationTextView textView, String indication) {
         int yTranslation = mContext.getResources().getInteger(
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/notification/ActivityLaunchAnimator.java b/packages/SystemUI/src/com/android/systemui/statusbar/notification/ActivityLaunchAnimator.java
index 1e1655256b1..382715a3fb7 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/notification/ActivityLaunchAnimator.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/notification/ActivityLaunchAnimator.java
@@ -20,12 +20,9 @@ import android.animation.Animator;
 import android.animation.AnimatorListenerAdapter;
 import android.animation.ValueAnimator;
 import android.app.ActivityManager;
-import android.content.Context;
 import android.graphics.Matrix;
 import android.graphics.Rect;
-import android.hardware.fingerprint.IFingerprintService;
 import android.os.RemoteException;
-import android.os.ServiceManager;
 import android.util.MathUtils;
 import android.view.IRemoteAnimationFinishedCallback;
 import android.view.IRemoteAnimationRunner;
@@ -37,7 +34,6 @@ import android.view.View;
 
 import com.android.internal.policy.ScreenDecorationsUtils;
 import com.android.systemui.Interpolators;
-import com.android.systemui.biometrics.FODCircleViewImpl;
 import com.android.systemui.statusbar.NotificationShadeDepthController;
 import com.android.systemui.statusbar.notification.row.ExpandableNotificationRow;
 import com.android.systemui.statusbar.notification.stack.NotificationListContainer;
@@ -74,8 +70,6 @@ public class ActivityLaunchAnimator {
     private boolean mAnimationPending;
     private boolean mAnimationRunning;
     private boolean mIsLaunchForActivity;
-    private IFingerprintService mFingerprintService;
-    private FODCircleViewImpl mFODCircleViewImpl;
 
     public ActivityLaunchAnimator(
             NotificationShadeWindowViewController notificationShadeWindowViewController,
@@ -83,8 +77,7 @@ public class ActivityLaunchAnimator {
             NotificationPanelViewController notificationPanel,
             NotificationShadeDepthController depthController,
             NotificationListContainer container,
-            Executor mainExecutor,
-            FODCircleViewImpl fodCircleViewImpl) {
+            Executor mainExecutor) {
         mNotificationPanel = notificationPanel;
         mNotificationContainer = container;
         mDepthController = depthController;
@@ -94,9 +87,6 @@ public class ActivityLaunchAnimator {
         mWindowCornerRadius = ScreenDecorationsUtils
                 .getWindowCornerRadius(mNotificationShadeWindowViewController.getView()
                         .getResources());
-        mFODCircleViewImpl = fodCircleViewImpl;
-        mFingerprintService = IFingerprintService.Stub.asInterface(
-                ServiceManager.getService(Context.FINGERPRINT_SERVICE));
     }
 
     public RemoteAnimationAdapter getLaunchAnimation(
@@ -273,15 +263,6 @@ public class ActivityLaunchAnimator {
             mNotificationShadeWindowViewController.setExpandAnimationRunning(running);
             mNotificationContainer.setExpandingNotification(running ? mSourceNotification : null);
             mAnimationRunning = running;
-            boolean isFPClientActive = false;
-            try {
-                isFPClientActive = mFingerprintService.isClientActive();
-            } catch (Exception e) {
-                // do nothing.
-            }
-            if (!isFPClientActive) {
-                mFODCircleViewImpl.hideInDisplayFingerprintView();
-            }
             if (!running) {
                 mCallback.onExpandAnimationFinished(mIsFullScreenLaunch);
                 applyParamsToNotification(null);
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/phone/StatusBar.java b/packages/SystemUI/src/com/android/systemui/statusbar/phone/StatusBar.java
index fa2121ecde6..9f431398d42 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/phone/StatusBar.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/phone/StatusBar.java
@@ -79,7 +79,6 @@ import android.graphics.PointF;
 import android.graphics.Rect;
 import android.hardware.display.DisplayManager;
 import android.graphics.drawable.GradientDrawable;
-import android.hardware.fingerprint.IFingerprintService;
 import android.media.AudioAttributes;
 import android.media.MediaMetadata;
 import android.metrics.LogMaker;
@@ -168,8 +167,6 @@ import com.android.systemui.SystemUI;
 import com.android.systemui.SystemUIFactory;
 import com.android.systemui.UiOffloadThread;
 import com.android.systemui.assist.AssistManager;
-import com.android.systemui.biometrics.FODCircleViewImpl;
-import com.android.systemui.biometrics.FODCircleViewImplCallback;
 import com.android.systemui.broadcast.BroadcastDispatcher;
 import com.android.systemui.bubbles.BubbleController;
 import com.android.systemui.charging.WirelessChargingAnimation;
@@ -264,7 +261,6 @@ import lineageos.providers.LineageSettings;
 import java.io.FileDescriptor;
 import java.io.PrintWriter;
 import java.io.StringWriter;
-import java.util.List;
 import java.util.Map;
 import java.util.Optional;
 import java.util.concurrent.Executor;
@@ -724,33 +720,6 @@ public class StatusBar extends SystemUI implements DemoMode,
         }
     };
 
-    private ActivityManager mActivityManager;
-    private boolean mFodVisibility;
-    private boolean mIsDreaming;
-    private FODCircleViewImpl mFODCircleViewImpl;
-    private String mTopPkgClass;
-    private FODCircleViewImplCallback mFODCircleViewImplCallback =
-            new FODCircleViewImplCallback() {
-                @Override
-                public void onFODStatusChange(boolean isVisible) {
-                    boolean isFPClientActive = false;
-                    try {
-                        isFPClientActive = mFingerprintService.isClientActive();
-                    } catch (Exception e) {
-                        // do nothing.
-                    }
-                    mFodVisibility = isVisible;
-                    if (!isFPClientActive) {
-                        // if the client is not active, we have to nullify mTopPkgClass before
-                        // checking it against current foreground activity
-                        mTopPkgClass = null;
-                        return;
-                    } else if (isVisible && !mIsKeyguard && !mIsDreaming) {
-                        mTopPkgClass = getForegroundPackageNameAndClass();
-                    }
-                }
-            };
-
     private FlashlightController mFlashlightController;
     private KeyguardUserSwitcher mKeyguardUserSwitcher;
     private final UserSwitcherController mUserSwitcherController;
@@ -780,7 +749,6 @@ public class StatusBar extends SystemUI implements DemoMode,
             new KeyguardUpdateMonitorCallback() {
                 @Override
                 public void onDreamingStateChanged(boolean dreaming) {
-                    mIsDreaming = dreaming;
                     if (dreaming) {
                         maybeEscalateHeadsUp();
                     }
@@ -805,7 +773,6 @@ public class StatusBar extends SystemUI implements DemoMode,
     private Lazy<NotificationShadeDepthController> mNotificationShadeDepthControllerLazy;
     private final BubbleController mBubbleController;
     private final BubbleController.BubbleExpandListener mBubbleExpandListener;
-    private final IFingerprintService mFingerprintService;
 
     private ActivityIntentHelper mActivityIntentHelper;
 
@@ -906,8 +873,7 @@ public class StatusBar extends SystemUI implements DemoMode,
             DismissCallbackRegistry dismissCallbackRegistry,
             Lazy<NotificationShadeDepthController> notificationShadeDepthControllerLazy,
             StatusBarTouchableRegionManager statusBarTouchableRegionManager,
-            TunerService tunerService,
-            FODCircleViewImpl fodCircleViewImpl) {
+            TunerService tunerService) {
         super(context);
         mNotificationsController = notificationsController;
         mLightBarController = lightBarController;
@@ -985,7 +951,6 @@ public class StatusBar extends SystemUI implements DemoMode,
         mIconPolicy = phoneStatusBarPolicy;
         mDismissCallbackRegistry = dismissCallbackRegistry;
         mTunerService = tunerService;
-        mFODCircleViewImpl = fodCircleViewImpl;
 
         mBubbleExpandListener =
                 (isExpanding, key) -> {
@@ -995,9 +960,6 @@ public class StatusBar extends SystemUI implements DemoMode,
 
 
         DateTimeView.setReceiverHandler(timeTickHandler);
-
-        mFingerprintService = IFingerprintService.Stub.asInterface(
-                ServiceManager.getService(Context.FINGERPRINT_SERVICE));
     }
 
     @Override
@@ -1211,8 +1173,6 @@ public class StatusBar extends SystemUI implements DemoMode,
                         }
                     }
                 }, OverlayPlugin.class, true /* Allow multiple plugins */);
-                mActivityManager = mContext.getSystemService(ActivityManager.class);
-                mFODCircleViewImpl.registerCallback(mFODCircleViewImplCallback);
     }
 
     // ================================================================================
@@ -1527,8 +1487,7 @@ public class StatusBar extends SystemUI implements DemoMode,
         mActivityLaunchAnimator = new ActivityLaunchAnimator(
                 mNotificationShadeWindowViewController, this, mNotificationPanelViewController,
                 mNotificationShadeDepthControllerLazy.get(),
-                (NotificationListContainer) mStackScroller, mContext.getMainExecutor(),
-                mFODCircleViewImpl);
+                (NotificationListContainer) mStackScroller, mContext.getMainExecutor());
 
         // TODO: inject this.
         mPresenter = new StatusBarNotificationPresenter(mContext, mNotificationPanelViewController,
@@ -2056,12 +2015,6 @@ public class StatusBar extends SystemUI implements DemoMode,
             clearNotificationEffects();
         }
 
-        if (isExpanded && mFodVisibility) {
-            mFODCircleViewImpl.hideInDisplayFingerprintView();
-        } else if (!isExpanded && getForegroundPackageNameAndClass().equals(mTopPkgClass)) {
-            mFODCircleViewImpl.showInDisplayFingerprintView();
-        }
-
         if (!isExpanded) {
             mRemoteInputManager.onPanelCollapsed();
         }
@@ -2831,11 +2784,6 @@ public class StatusBar extends SystemUI implements DemoMode,
     @Override
     public void onRecentsAnimationStateChanged(boolean running) {
         setInteracting(StatusBarManager.WINDOW_NAVIGATION_BAR, running);
-        if (!running && getForegroundPackageNameAndClass().equals(mTopPkgClass)) {
-            mFODCircleViewImpl.showInDisplayFingerprintView();
-        } else {
-            mFODCircleViewImpl.hideInDisplayFingerprintView();
-        }
     }
 
     void checkBarModes() {
@@ -5194,24 +5142,6 @@ public class StatusBar extends SystemUI implements DemoMode,
         mDozeServiceHost.setDozeSuppressed(suppressed);
     }
 
-    private String getForegroundPackageNameAndClass() {
-        List<ActivityManager.RunningTaskInfo> tasks = mActivityManager.getRunningTasks(1);
-        if (tasks.isEmpty()) {
-            return null;
-        }
-        ActivityManager.RunningTaskInfo currentTask = tasks.get(0);
-        ComponentName currentActivity = currentTask.topActivity;
-        if (currentActivity.getPackageName() != null) {
-            return currentActivity.getPackageName().trim() +
-                  currentActivity.getShortClassName().trim();
-        }
-        return null;
-    }
-
-    public int getFodHeight(boolean includeDecor) {
-        return mFODCircleViewImpl.getHeight(includeDecor);
-    }
-
     private void setBlackStatusBar(boolean enable) {
         if (mNotificationShadeWindowViewController == null ||
             mNotificationShadeWindowViewController.getBarTransitions() == null) return;
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/phone/StatusBarKeyguardViewManager.java b/packages/SystemUI/src/com/android/systemui/statusbar/phone/StatusBarKeyguardViewManager.java
index 739b4dbe3ed..ab820702d19 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/phone/StatusBarKeyguardViewManager.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/phone/StatusBarKeyguardViewManager.java
@@ -127,7 +127,6 @@ public class StatusBarKeyguardViewManager implements RemoteInputController.Callb
 
         @Override
         public void onStartingToShow() {
-            updateStates();
             updateLockIcon();
         }
 
@@ -175,7 +174,6 @@ public class StatusBarKeyguardViewManager implements RemoteInputController.Callb
     protected boolean mLastShowing;
     protected boolean mLastOccluded;
     private boolean mLastBouncerShowing;
-    private boolean mLastBouncerInTransit;
     private boolean mLastBouncerDismissible;
     protected boolean mLastRemoteInputActive;
     private boolean mLastDozing;
@@ -846,7 +844,6 @@ public class StatusBarKeyguardViewManager implements RemoteInputController.Callb
         boolean showing = mShowing;
         boolean occluded = mOccluded;
         boolean bouncerShowing = mBouncer.isShowing();
-        boolean bouncerInTransit = mBouncer.inTransit();
         boolean bouncerDismissible = !mBouncer.isFullscreenBouncer();
         boolean remoteInputActive = mRemoteInputActive;
 
@@ -888,11 +885,8 @@ public class StatusBarKeyguardViewManager implements RemoteInputController.Callb
         if ((showing && !occluded) != (mLastShowing && !mLastOccluded) || mFirstUpdate) {
             mKeyguardUpdateManager.onKeyguardVisibilityChanged(showing && !occluded);
         }
-
-        boolean bouncerVisible = bouncerShowing || bouncerInTransit;
-        boolean lastBouncerVisible = mLastBouncerShowing || mLastBouncerInTransit;
-        if (bouncerVisible != lastBouncerVisible || mFirstUpdate) {
-            mKeyguardUpdateManager.sendKeyguardBouncerChanged(bouncerVisible);
+        if (bouncerShowing != mLastBouncerShowing || mFirstUpdate) {
+            mKeyguardUpdateManager.sendKeyguardBouncerChanged(bouncerShowing);
         }
 
         mFirstUpdate = false;
@@ -900,7 +894,6 @@ public class StatusBarKeyguardViewManager implements RemoteInputController.Callb
         mLastGlobalActionsVisible = mGlobalActionsVisible;
         mLastOccluded = occluded;
         mLastBouncerShowing = bouncerShowing;
-        mLastBouncerInTransit = bouncerInTransit;
         mLastBouncerDismissible = bouncerDismissible;
         mLastRemoteInputActive = remoteInputActive;
         mLastDozing = mDozing;
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/phone/dagger/StatusBarPhoneModule.java b/packages/SystemUI/src/com/android/systemui/statusbar/phone/dagger/StatusBarPhoneModule.java
index dfd4c6b5d46..8c0dd002eb0 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/phone/dagger/StatusBarPhoneModule.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/phone/dagger/StatusBarPhoneModule.java
@@ -30,7 +30,6 @@ import com.android.keyguard.KeyguardUpdateMonitor;
 import com.android.keyguard.ViewMediatorCallback;
 import com.android.systemui.InitController;
 import com.android.systemui.assist.AssistManager;
-import com.android.systemui.biometrics.FODCircleViewImpl;
 import com.android.systemui.broadcast.BroadcastDispatcher;
 import com.android.systemui.bubbles.BubbleController;
 import com.android.systemui.colorextraction.SysuiColorExtractor;
@@ -201,8 +200,7 @@ public interface StatusBarPhoneModule {
             Lazy<NotificationShadeDepthController> notificationShadeDepthController,
             DismissCallbackRegistry dismissCallbackRegistry,
             StatusBarTouchableRegionManager statusBarTouchableRegionManager,
-            TunerService tunerService,
-            FODCircleViewImpl fodCircleViewImpl) {
+            TunerService tunerService) {
         return new StatusBar(
                 context,
                 notificationsController,
@@ -281,7 +279,6 @@ public interface StatusBarPhoneModule {
                 dismissCallbackRegistry,
                 notificationShadeDepthController,
                 statusBarTouchableRegionManager,
-                tunerService,
-                fodCircleViewImpl);
+                tunerService);
     }
 }
diff --git a/packages/SystemUI/tests/src/com/android/systemui/statusbar/notification/ActivityLaunchAnimatorTest.java b/packages/SystemUI/tests/src/com/android/systemui/statusbar/notification/ActivityLaunchAnimatorTest.java
index 3e5454d84d0..2fa6cf02d8b 100644
--- a/packages/SystemUI/tests/src/com/android/systemui/statusbar/notification/ActivityLaunchAnimatorTest.java
+++ b/packages/SystemUI/tests/src/com/android/systemui/statusbar/notification/ActivityLaunchAnimatorTest.java
@@ -30,7 +30,6 @@ import android.view.RemoteAnimationAdapter;
 import android.view.View;
 
 import com.android.systemui.SysuiTestCase;
-import com.android.systemui.biometrics.FODCircleViewImpl;
 import com.android.systemui.statusbar.NotificationShadeDepthController;
 import com.android.systemui.statusbar.notification.row.ExpandableNotificationRow;
 import com.android.systemui.statusbar.notification.stack.NotificationListContainer;
@@ -70,8 +69,6 @@ public class ActivityLaunchAnimatorTest extends SysuiTestCase {
     private NotificationShadeDepthController mNotificationShadeDepthController;
     @Mock
     private NotificationPanelViewController mNotificationPanelViewController;
-    @Mock
-    private FODCircleViewImpl mFODCircleViewImpl;
     @Rule
     public MockitoRule rule = MockitoJUnit.rule();
 
@@ -87,8 +84,7 @@ public class ActivityLaunchAnimatorTest extends SysuiTestCase {
                 mNotificationPanelViewController,
                 mNotificationShadeDepthController,
                 mNotificationContainer,
-                mExecutor,
-                mFODCircleViewImpl);
+                mExecutor);
     }
 
     @Test
diff --git a/packages/SystemUI/tests/src/com/android/systemui/statusbar/phone/StatusBarTest.java b/packages/SystemUI/tests/src/com/android/systemui/statusbar/phone/StatusBarTest.java
index c6dba6b8b80..474e9d7446f 100644
--- a/packages/SystemUI/tests/src/com/android/systemui/statusbar/phone/StatusBarTest.java
+++ b/packages/SystemUI/tests/src/com/android/systemui/statusbar/phone/StatusBarTest.java
@@ -79,7 +79,6 @@ import com.android.systemui.InitController;
 import com.android.systemui.R;
 import com.android.systemui.SysuiTestCase;
 import com.android.systemui.assist.AssistManager;
-import com.android.systemui.biometrics.FODCircleViewImpl;
 import com.android.systemui.broadcast.BroadcastDispatcher;
 import com.android.systemui.bubbles.BubbleController;
 import com.android.systemui.classifier.FalsingManagerFake;
@@ -241,7 +240,6 @@ public class StatusBarTest extends SysuiTestCase {
     @Mock private DismissCallbackRegistry mDismissCallbackRegistry;
     @Mock private StatusBarTouchableRegionManager mStatusBarTouchableRegionManager;
     @Mock private TunerService mTunerService;
-    @Mock private FODCircleViewImpl mFODCircleViewImpl;
     @Mock private ScreenPinningRequest mScreenPinningRequest;
     @Mock private LockscreenLockIconController mLockscreenLockIconController;
     @Mock private StatusBarNotificationActivityStarter.Builder
@@ -409,8 +407,7 @@ public class StatusBarTest extends SysuiTestCase {
                 mDismissCallbackRegistry,
                 mNotificationShadeDepthControllerLazy,
                 mStatusBarTouchableRegionManager,
-                mTunerService,
-                mFODCircleViewImpl);
+                mTunerService);
 
         when(mNotificationShadeWindowView.findViewById(R.id.lock_icon_container)).thenReturn(
                 mLockIconContainer);
diff --git a/services/core/Android.bp b/services/core/Android.bp
index 55e109e3329..7ad86fae59f 100644
--- a/services/core/Android.bp
+++ b/services/core/Android.bp
@@ -141,7 +141,6 @@ java_library_static {
         "org.lineageos.platform.internal",
         "overlayable_policy_aidl-java",
         "SurfaceFlingerProperties",
-        "vendor.lineage.biometrics.fingerprint.inscreen-V1.0-java",
     ],
 }
 
diff --git a/services/core/java/com/android/server/biometrics/BiometricServiceBase.java b/services/core/java/com/android/server/biometrics/BiometricServiceBase.java
index 5bb4d272eae..70369732fea 100644
--- a/services/core/java/com/android/server/biometrics/BiometricServiceBase.java
+++ b/services/core/java/com/android/server/biometrics/BiometricServiceBase.java
@@ -1047,7 +1047,7 @@ public abstract class BiometricServiceBase extends SystemService
     /**
      * @return true if this is keyguard package
      */
-    protected boolean isKeyguard(String clientPackage) {
+    private boolean isKeyguard(String clientPackage) {
         return mKeyguardPackage.equals(clientPackage);
     }
 
diff --git a/services/core/java/com/android/server/biometrics/fingerprint/FingerprintService.java b/services/core/java/com/android/server/biometrics/fingerprint/FingerprintService.java
index c0ce72e1438..03877e0e2b2 100644
--- a/services/core/java/com/android/server/biometrics/fingerprint/FingerprintService.java
+++ b/services/core/java/com/android/server/biometrics/fingerprint/FingerprintService.java
@@ -81,17 +81,12 @@ import org.json.JSONArray;
 import org.json.JSONException;
 import org.json.JSONObject;
 
-import lineageos.app.LineageContextConstants;
-
-import vendor.lineage.biometrics.fingerprint.inscreen.V1_0.IFingerprintInscreen;
-
 import java.io.File;
 import java.io.FileDescriptor;
 import java.io.PrintWriter;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
-import java.util.NoSuchElementException;
 import java.util.concurrent.CopyOnWriteArrayList;
 
 /**
@@ -113,9 +108,6 @@ public class FingerprintService extends BiometricServiceBase {
     private static final long FAIL_LOCKOUT_TIMEOUT_MS = 30 * 1000;
     private static final String KEY_LOCKOUT_RESET_USER = "lockout_reset_user";
 
-    private final boolean mHasFod;
-    private boolean mIsKeyguard;
-
     private final class ResetFailedAttemptsForUserRunnable implements Runnable {
         @Override
         public void run() {
@@ -650,7 +642,6 @@ public class FingerprintService extends BiometricServiceBase {
 
     @GuardedBy("this")
     private IBiometricsFingerprint mDaemon;
-    private IFingerprintInscreen mFingerprintInscreenDaemon;
     private final SparseBooleanArray mTimedLockoutCleared;
     private final SparseIntArray mFailedAttempts;
     private final AlarmManager mAlarmManager;
@@ -672,21 +663,6 @@ public class FingerprintService extends BiometricServiceBase {
                         new Fingerprint(getBiometricUtils().getUniqueName(getContext(), groupId),
                                 groupId, fingerId, deviceId);
                 FingerprintService.super.handleEnrollResult(fingerprint, remaining);
-                if (remaining == 0 && mHasFod) {
-                    IFingerprintInscreen fodDaemon = getFingerprintInScreenDaemon();
-                    if (fodDaemon != null) {
-                        try {
-                            fodDaemon.onFinishEnroll();
-                        } catch (RemoteException e) {
-                            Slog.e(TAG, "onFinishEnroll failed", e);
-                        }
-                    }
-                    try {
-                        mStatusBarService.hideInDisplayFingerprintView();
-                    } catch (RemoteException e) {
-                        Slog.e(TAG, "hideInDisplayFingerprintView failed", e);
-                    }
-                }
             });
         }
 
@@ -698,16 +674,6 @@ public class FingerprintService extends BiometricServiceBase {
         @Override
         public void onAcquired_2_2(long deviceId, int acquiredInfo, int vendorCode) {
             mHandler.post(() -> {
-                IFingerprintInscreen daemon = getFingerprintInScreenDaemon();
-                if (daemon != null) {
-                    try {
-                        if (daemon.handleAcquired(acquiredInfo, vendorCode)) {
-                            return;
-                        }
-                    } catch (RemoteException e) {
-                        Slog.e(TAG, "handleError failed", e);
-                    }
-                }
                 FingerprintService.super.handleAcquired(deviceId, acquiredInfo, vendorCode);
             });
         }
@@ -727,29 +693,12 @@ public class FingerprintService extends BiometricServiceBase {
 
                 final Fingerprint fp = new Fingerprint("", groupId, fingerId, deviceId);
                 FingerprintService.super.handleAuthenticated(authenticated, fp, token);
-                if (mHasFod && fp.getBiometricId() != 0) {
-                    try {
-                        mStatusBarService.hideInDisplayFingerprintView();
-                    } catch (RemoteException e) {
-                        Slog.e(TAG, "hideInDisplayFingerprintView failed", e);
-                    }
-                }
             });
         }
 
         @Override
         public void onError(final long deviceId, final int error, final int vendorCode) {
             mHandler.post(() -> {
-                IFingerprintInscreen daemon = getFingerprintInScreenDaemon();
-                if (daemon != null) {
-                    try {
-                        if (daemon.handleError(error, vendorCode)) {
-                            return;
-                        }
-                    } catch (RemoteException e) {
-                        Slog.e(TAG, "handleError failed", e);
-                    }
-                }
                 FingerprintService.super.handleError(deviceId, error, vendorCode);
                 // TODO: this chunk of code should be common to all biometric services
                 if (error == BiometricConstants.BIOMETRIC_ERROR_HW_UNAVAILABLE) {
@@ -797,21 +746,6 @@ public class FingerprintService extends BiometricServiceBase {
                 Slog.w(TAG, "authenticate(): no fingerprint HAL!");
                 return ERROR_ESRCH;
             }
-            if (mHasFod) {
-                IFingerprintInscreen fodDaemon = getFingerprintInScreenDaemon();
-                if (fodDaemon != null) {
-                    try {
-                        fodDaemon.setLongPressEnabled(mIsKeyguard);
-                    } catch (RemoteException e) {
-                        Slog.e(TAG, "setLongPressEnabled failed", e);
-                    }
-                }
-                try {
-                    mStatusBarService.showInDisplayFingerprintView();
-                } catch (RemoteException e) {
-                    Slog.e(TAG, "showInDisplayFingerprintView failed", e);
-                }
-            }
             return daemon.authenticate(operationId, groupId);
         }
 
@@ -822,13 +756,6 @@ public class FingerprintService extends BiometricServiceBase {
                 Slog.w(TAG, "cancel(): no fingerprint HAL!");
                 return ERROR_ESRCH;
             }
-            if (mHasFod) {
-                try {
-                    mStatusBarService.hideInDisplayFingerprintView();
-                } catch (RemoteException e) {
-                    Slog.e(TAG, "hideInDisplayFingerprintView failed", e);
-                }
-            }
             return daemon.cancel();
         }
 
@@ -860,21 +787,6 @@ public class FingerprintService extends BiometricServiceBase {
                 Slog.w(TAG, "enroll(): no fingerprint HAL!");
                 return ERROR_ESRCH;
             }
-            if (mHasFod) {
-                IFingerprintInscreen fodDaemon = getFingerprintInScreenDaemon();
-                if (fodDaemon != null) {
-                    try {
-                        fodDaemon.onStartEnroll();
-                    } catch (RemoteException e) {
-                        Slog.e(TAG, "onStartEnroll failed", e);
-                    }
-                }
-                try {
-                    mStatusBarService.showInDisplayFingerprintView();
-                } catch (RemoteException e) {
-                    Slog.e(TAG, "showInDisplayFingerprintView failed", e);
-                }
-            }
             return daemon.enroll(cryptoToken, groupId, timeout);
         }
 
@@ -894,13 +806,6 @@ public class FingerprintService extends BiometricServiceBase {
         context.registerReceiver(mLockoutReceiver, new IntentFilter(getLockoutResetIntent()),
                 getLockoutBroadcastPermission(), null /* handler */);
         mLockPatternUtils = new LockPatternUtils(context);
-
-        PackageManager packageManager = context.getPackageManager();
-        if (packageManager.hasSystemFeature(LineageContextConstants.Features.FOD) || FodUtils.hasFodSupport(context)){
-            mHasFod = true;
-        }else{
-            mHasFod = false;
-        }
     }
 
     @Override
@@ -985,7 +890,6 @@ public class FingerprintService extends BiometricServiceBase {
 
                     daemon.setActiveGroup(userId, fpDir.getAbsolutePath());
                     mCurrentUserId = userId;
-                    mIsKeyguard = isKeyguard(clientPackage);
                 }
                 mAuthenticatorIds.put(userId,
                         hasEnrolledBiometrics(userId) ? daemon.getAuthenticatorId() : 0L);
@@ -1123,26 +1027,6 @@ public class FingerprintService extends BiometricServiceBase {
         return mDaemon;
     }
 
-    private synchronized IFingerprintInscreen getFingerprintInScreenDaemon() {
-        if (!mHasFod) {
-            return null;
-        }
-
-        if (mFingerprintInscreenDaemon == null) {
-            try {
-                mFingerprintInscreenDaemon = IFingerprintInscreen.getService();
-                if (mFingerprintInscreenDaemon != null) {
-                    mFingerprintInscreenDaemon.asBinder().linkToDeath((cookie) -> {
-                        mFingerprintInscreenDaemon = null;
-                    }, 0);
-                }
-            } catch (NoSuchElementException | RemoteException e) {
-                Slog.e(TAG, "Failed to get IFingerprintInscreen interface", e);
-            }
-        }
-        return mFingerprintInscreenDaemon;
-    }
-
     private long startPreEnroll(IBinder token) {
         IBiometricsFingerprint daemon = getFingerprintDaemon();
         if (daemon == null) {
diff --git a/services/core/java/com/android/server/statusbar/StatusBarManagerService.java b/services/core/java/com/android/server/statusbar/StatusBarManagerService.java
index c071105908a..602140c1425 100644
--- a/services/core/java/com/android/server/statusbar/StatusBarManagerService.java
+++ b/services/core/java/com/android/server/statusbar/StatusBarManagerService.java
@@ -757,28 +757,6 @@ public class StatusBarManagerService extends IStatusBarService.Stub implements D
         return mTracingEnabled;
     }
 
-    @Override
-    public void showInDisplayFingerprintView() {
-        if (mBar != null) {
-            try {
-                mBar.showInDisplayFingerprintView();
-            } catch (RemoteException ex) {
-                // do nothing
-            }
-        }
-    }
-
-    @Override
-    public void hideInDisplayFingerprintView() {
-        if (mBar != null) {
-            try {
-                mBar.hideInDisplayFingerprintView();
-            } catch (RemoteException ex) {
-                // do nothing
-            }
-        }
-    }
-
     @Override
     public void setBlockedGesturalNavigation(boolean blocked) {
         if (mBar != null) {
-- 
2.25.1

